"VariableIdentifier\n"
"	 : = IDENTIFIER	$$ = ??\n"
"\n"
"PrimaryExpression\n"
"	 : = NUMBER	$$ = ??\n"
"	 | = TRUE	$$ = ??\n"
"	 | = FALSE	$$ = ??\n"
"	 | = VariableIdentifier	$$ = ??\n"
"	 | = LEFT_PAREN Expression RIGHT_PAREN	$$ = ??\n"
"\n"
"PostfixExpression\n"
"	 : = PrimaryExpression	$$ = ??\n"
"	 | = PostfixExpression LEFT_BRACKET IntegerExpression RIGHT_BRACKET	$$ = ??\n"
"	 | = FunctionCall	$$ = ??\n"
"	 | = PostfixExpression DOT IDENTIFIER	$$ = ??\n"
"	 | = PostfixExpression INC_OP	$$ = ??\n"
"	 | = PostfixExpression DEC_OP	$$ = ??\n"
"\n"
"IntegerExpression\n"
"	 : = Expression	$$ = ??\n"
"\n"
"FunctionCall\n"
"	 : = FunctionCallOrMethod	$$ = ??\n"
"\n"
"FunctionCallOrMethod\n"
"	 : = FunctionCallGeneric	$$ = ??\n"
"	 | = PostfixExpression DOT FunctionCallGeneric	$$ = ??\n"
"\n"
"FunctionCallGeneric\n"
"	 : = FunctionCallHeaderWithParameters RIGHT_PAREN	$$ = ??\n"
"	 | = FunctionCallHeaderNoParameters RIGHT_PAREN	$$ = ??\n"
"\n"
"FunctionCallHeaderNoParameters\n"
"	 : = FunctionCallHeader VOID	$$ = ??\n"
"	 | = FunctionCallHeader	$$ = ??\n"
"\n"
"FunctionCallHeaderWithParameters\n"
"	 : = FunctionCallHeader AssignmentExpression	$$ = ??\n"
"	 | = FunctionCallHeaderWithParameters COMMA AssignmentExpression	$$ = ??\n"
"\n"
"FunctionCallHeader\n"
"	 : = FunctionIdentifier LEFT_PAREN	$$ = ??\n"
"\n"
"FunctionIdentifier\n"
"	 : = TypeSpecifier	$$ = ??\n"
"	 | = IDENTIFIER	$$ = ??\n"
"\n"
"UnaryExpression\n"
"	 : = PostfixExpression	$$ = ??\n"
"	 | = INC_OP UnaryExpression	$$ = ??\n"
"	 | = DEC_OP UnaryExpression	$$ = ??\n"
"	 | = UnaryOperator UnaryExpression	$$ = ??\n"
"\n"
"UnaryOperator\n"
"	 : = PLUS	$$ = ??\n"
"	 | = DASH	$$ = ??\n"
"	 | = BANG	$$ = ??\n"
"	 | = TILDE	$$ = ??\n"
"\n"
"MultiplicativeExpression\n"
"	 : = UnaryExpression	$$ = ??\n"
"	 | = MultiplicativeExpression STAR UnaryExpression	$$ = ??\n"
"	 | = MultiplicativeExpression SLASH UnaryExpression	$$ = ??\n"
"	 | = MultiplicativeExpression PERCENT UnaryExpression	$$ = ??\n"
"\n"
"AdditiveExpression\n"
"	 : = MultiplicativeExpression	$$ = ??\n"
"	 | = AdditiveExpression PLUS MultiplicativeExpression	$$ = ??\n"
"	 | = AdditiveExpression DASH MultiplicativeExpression	$$ = ??\n"
"\n"
"ShiftExpression\n"
"	 : = AdditiveExpression	$$ = ??\n"
"	 | = ShiftExpression LEFT_OP AdditiveExpression	$$ = ??\n"
"	 | = ShiftExpression RIGHT_OP AdditiveExpression	$$ = ??\n"
"\n"
"RelationalExpression\n"
"	 : = ShiftExpression	$$ = ??\n"
"	 | = RelationalExpression LEFT_ANGLE ShiftExpression	$$ = ??\n"
"	 | = RelationalExpression RIGHT_ANGLE ShiftExpression	$$ = ??\n"
"	 | = RelationalExpression LE_OP ShiftExpression	$$ = ??\n"
"	 | = RelationalExpression GE_OP ShiftExpression	$$ = ??\n"
"\n"
"EqualityExpression\n"
"	 : = RelationalExpression	$$ = ??\n"
"	 | = EqualityExpression EQ_OP RelationalExpression	$$ = ??\n"
"	 | = EqualityExpression NE_OP RelationalExpression	$$ = ??\n"
"\n"
"AndExpression\n"
"	 : = EqualityExpression	$$ = ??\n"
"	 | = AndExpression AMPERSAND EqualityExpression	$$ = ??\n"
"\n"
"ExclusiveOrExpression\n"
"	 : = AndExpression	$$ = ??\n"
"	 | = ExclusiveOrExpression CARET AndExpression	$$ = ??\n"
"\n"
"InclusiveOrExpression\n"
"	 : = ExclusiveOrExpression	$$ = ??\n"
"	 | = InclusiveOrExpression VERTICAL_BAR ExclusiveOrExpression	$$ = ??\n"
"\n"
"LogicalAndExpression\n"
"	 : = InclusiveOrExpression	$$ = ??\n"
"	 | = LogicalAndExpression AND_OP InclusiveOrExpression	$$ = ??\n"
"\n"
"LogicalXorExpression\n"
"	 : = LogicalAndExpression	$$ = ??\n"
"	 | = LogicalXorExpression XOR_OP LogicalAndExpression	$$ = ??\n"
"\n"
"LogicalOrExpression\n"
"	 : = LogicalXorExpression	$$ = ??\n"
"	 | = LogicalOrExpression OR_OP LogicalXorExpression	$$ = ??\n"
"\n"
"ConditionalExpression\n"
"	 : = LogicalOrExpression	$$ = ??\n"
"	 | = LogicalOrExpression QUESTION Expression COLON AssignmentExpression	$$ = ??\n"
"\n"
"AssignmentExpression\n"
"	 : = ConditionalExpression	$$ = ??\n"
"	 | = UnaryExpression AssignmentOperator AssignmentExpression	$$ = ??\n"
"\n"
"AssignmentOperator\n"
"	 : = EQUAL	$$ = ??\n"
"	 | = MUL_ASSIGN	$$ = ??\n"
"	 | = DIV_ASSIGN	$$ = ??\n"
"	 | = MOD_ASSIGN	$$ = ??\n"
"	 | = ADD_ASSIGN	$$ = ??\n"
"	 | = SUB_ASSIGN	$$ = ??\n"
"	 | = LEFT_ASSIGN	$$ = ??\n"
"	 | = RIGHT_ASSIGN	$$ = ??\n"
"	 | = AND_ASSIGN	$$ = ??\n"
"	 | = XOR_ASSIGN	$$ = ??\n"
"	 | = OR_ASSIGN	$$ = ??\n"
"\n"
"Expression\n"
"	 : = AssignmentExpression	$$ = ??\n"
"	 | = Expression COMMA AssignmentExpression	$$ = ??\n"
"\n"
"ConstantExpression\n"
"	 : = ConditionalExpression	$$ = ??\n"
"\n"
"Declaration\n"
"	 : = FunctionPrototype SEMICOLON	$$ = ??\n"
"	 | = InitDeclaratorList SEMICOLON	$$ = ??\n"
"	 | = PRECISION PrecisionQualifier TypeSpecifierNoPrec SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier IDENTIFIER LEFT_BRACE StructDeclarationList RIGHT_BRACE SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier IDENTIFIER LEFT_BRACE StructDeclarationList RIGHT_BRACE IDENTIFIER SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier IDENTIFIER LEFT_BRACE StructDeclarationList RIGHT_BRACE IDENTIFIER LEFT_BRACKET RIGHT_BRACKET SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier IDENTIFIER LEFT_BRACE StructDeclarationList RIGHT_BRACE IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier SEMICOLON	$$ = ??\n"
"\n"
"FunctionPrototype\n"
"	 : = FunctionDeclarator RIGHT_PAREN	$$ = ??\n"
"\n"
"FunctionDeclarator\n"
"	 : = FunctionHeader	$$ = ??\n"
"	 | = FunctionHeaderWithParameters	$$ = ??\n"
"\n"
"FunctionHeaderWithParameters\n"
"	 : = FunctionHeader ParameterDeclaration	$$ = ??\n"
"	 | = FunctionHeaderWithParameters COMMA ParameterDeclaration	$$ = ??\n"
"\n"
"FunctionHeader\n"
"	 : = FullySpecifiedType IDENTIFIER LEFT_PAREN	$$ = ??\n"
"\n"
"ParameterDeclarator\n"
"	 : = TypeSpecifier IDENTIFIER	$$ = ??\n"
"	 | = TypeSpecifier IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET	$$ = ??\n"
"\n"
"ParameterDeclaration\n"
"	 : = ParameterTypeQualifier ParameterQualifier ParameterDeclarator	$$ = ??\n"
"	 | = ParameterQualifier ParameterDeclarator	$$ = ??\n"
"	 | = ParameterTypeQualifier ParameterQualifier ParameterTypeSpecifier	$$ = ??\n"
"	 | = ParameterQualifier ParameterTypeSpecifier	$$ = ??\n"
"\n"
"ParameterQualifier\n"
"	 : = Empty	$$ = ??\n"
"	 | = IN	$$ = ??\n"
"	 | = OUT	$$ = ??\n"
"	 | = INOUT	$$ = ??\n"
"\n"
"ParameterTypeSpecifier\n"
"	 : = TypeSpecifier	$$ = ??\n"
"\n"
"InitDeclaratorList\n"
"	 : = SingleDeclaration	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL Initializer	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET EQUAL Initializer	$$ = ??\n"
"	 | = InitDeclaratorList COMMA IDENTIFIER EQUAL Initializer	$$ = ??\n"
"\n"
"SingleDeclaration\n"
"	 : = FullySpecifiedType	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER LEFT_BRACKET RIGHT_BRACKET	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER LEFT_BRACKET RIGHT_BRACKET EQUAL Initializer	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET EQUAL Initializer	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER EQUAL Initializer	$$ = ??\n"
"	 | = INVARIANT IDENTIFIER	$$ = ??\n"
"\n"
"FullySpecifiedType\n"
"	 : = TypeSpecifier	$$ = ??\n"
"	 | = TypeQualifier TypeSpecifier	$$ = ??\n"
"\n"
"InvariantQualifier\n"
"	 : = INVARIANT	$$ = ??\n"
"\n"
"InterpolationQualifier\n"
"	 : = SMOOTH	$$ = ??\n"
"	 | = FLAT	$$ = ??\n"
"	 | = NOPERSPECTIVE	$$ = ??\n"
"\n"
"LayoutQualifier\n"
"	 : = LAYOUT LEFT_PAREN LayoutQualifierIdList RIGHT_PAREN	$$ = ??\n"
"\n"
"LayoutQualifierIdList\n"
"	 : = LayoutQualifierId	$$ = ??\n"
"	 | = LayoutQualifierIdList COMMA LayoutQualifierId	$$ = ??\n"
"\n"
"LayoutQualifierId\n"
"	 : = IDENTIFIER	$$ = ??\n"
"	 | = IDENTIFIER EQUAL NUMBER	$$ = ??\n"
"\n"
"ParameterTypeQualifier\n"
"	 : = CONST	$$ = ??\n"
"\n"
"TypeQualifier\n"
"	 : = StorageQualifier	$$ = ??\n"
"	 | = LayoutQualifier	$$ = ??\n"
"	 | = LayoutQualifier StorageQualifier	$$ = ??\n"
"	 | = InterpolationQualifier StorageQualifier	$$ = ??\n"
"	 | = InterpolationQualifier	$$ = ??\n"
"	 | = InvariantQualifier StorageQualifier	$$ = ??\n"
"	 | = InvariantQualifier InterpolationQualifier StorageQualifier	$$ = ??\n"
"	 | = INVARIANT	$$ = ??\n"
"\n"
"StorageQualifier\n"
"	 : = CONST	$$ = ??\n"
"	 | = ATTRIBUTE	$$ = ??\n"
"	 | = VARYING	$$ = ??\n"
"	 | = CENTROID VARYING	$$ = ??\n"
"	 | = IN	$$ = ??\n"
"	 | = OUT	$$ = ??\n"
"	 | = CENTROID IN	$$ = ??\n"
"	 | = CENTROID OUT	$$ = ??\n"
"	 | = PATCH IN	$$ = ??\n"
"	 | = PATCH OUT	$$ = ??\n"
"	 | = SAMPLE IN	$$ = ??\n"
"	 | = SAMPLE OUT	$$ = ??\n"
"	 | = UNIFORM	$$ = ??\n"
"\n"
"TypeSpecifier\n"
"	 : = TypeSpecifierNoPrec	$$ = ??\n"
"	 | = PrecisionQualifier TypeSpecifierNoPrec	$$ = ??\n"
"\n"
"TypeSpecifierNoPrec\n"
"	 : = TypeSpecifierNonarray	$$ = ??\n"
"	 | = TypeSpecifierNonarray LEFT_BRACKET RIGHT_BRACKET	$$ = ??\n"
"	 | = TypeSpecifierNonarray LEFT_BRACKET ConstantExpression RIGHT_BRACKET	$$ = ??\n"
"\n"
"TypeSpecifierNonarray\n"
"	 : = VOID	$$ = ??\n"
"	 | = FLOAT	$$ = ??\n"
"	 | = DOUBLE	$$ = ??\n"
"	 | = INT	$$ = ??\n"
"	 | = UINT	$$ = ??\n"
"	 | = BOOL	$$ = ??\n"
"	 | = VEC2	$$ = ??\n"
"	 | = VEC3	$$ = ??\n"
"	 | = VEC4	$$ = ??\n"
"	 | = DVEC2	$$ = ??\n"
"	 | = DVEC3	$$ = ??\n"
"	 | = DVEC4	$$ = ??\n"
"	 | = BVEC2	$$ = ??\n"
"	 | = BVEC3	$$ = ??\n"
"	 | = BVEC4	$$ = ??\n"
"	 | = IVEC2	$$ = ??\n"
"	 | = IVEC3	$$ = ??\n"
"	 | = IVEC4	$$ = ??\n"
"	 | = UVEC2	$$ = ??\n"
"	 | = UVEC3	$$ = ??\n"
"	 | = UVEC4	$$ = ??\n"
"	 | = MAT2	$$ = ??\n"
"	 | = MAT3	$$ = ??\n"
"	 | = MAT4	$$ = ??\n"
"	 | = MAT2X2	$$ = ??\n"
"	 | = MAT2X3	$$ = ??\n"
"	 | = MAT2X4	$$ = ??\n"
"	 | = MAT3X2	$$ = ??\n"
"	 | = MAT3X3	$$ = ??\n"
"	 | = MAT3X4	$$ = ??\n"
"	 | = MAT4X2	$$ = ??\n"
"	 | = MAT4X3	$$ = ??\n"
"	 | = MAT4X4	$$ = ??\n"
"	 | = DMAT2	$$ = ??\n"
"	 | = DMAT3	$$ = ??\n"
"	 | = DMAT4	$$ = ??\n"
"	 | = DMAT2X2	$$ = ??\n"
"	 | = DMAT2X3	$$ = ??\n"
"	 | = DMAT2X4	$$ = ??\n"
"	 | = DMAT3X2	$$ = ??\n"
"	 | = DMAT3X3	$$ = ??\n"
"	 | = DMAT3X4	$$ = ??\n"
"	 | = DMAT4X2	$$ = ??\n"
"	 | = DMAT4X3	$$ = ??\n"
"	 | = DMAT4X4	$$ = ??\n"
"	 | = SAMPLER1D	$$ = ??\n"
"	 | = SAMPLER2D	$$ = ??\n"
"	 | = SAMPLER3D	$$ = ??\n"
"	 | = SAMPLERCUBE	$$ = ??\n"
"	 | = SAMPLER1DSHADOW	$$ = ??\n"
"	 | = SAMPLER2DSHADOW	$$ = ??\n"
"	 | = SAMPLERCUBESHADOW	$$ = ??\n"
"	 | = SAMPLER1DARRAY	$$ = ??\n"
"	 | = SAMPLER2DARRAY	$$ = ??\n"
"	 | = SAMPLER1DARRAYSHADOW	$$ = ??\n"
"	 | = SAMPLER2DARRAYSHADOW	$$ = ??\n"
"	 | = SAMPLERCUBEARRAY	$$ = ??\n"
"	 | = SAMPLERCUBEARRAYSHADOW	$$ = ??\n"
"	 | = ISAMPLER1D	$$ = ??\n"
"	 | = ISAMPLER2D	$$ = ??\n"
"	 | = ISAMPLER3D	$$ = ??\n"
"	 | = ISAMPLERCUBE	$$ = ??\n"
"	 | = ISAMPLER1DARRAY	$$ = ??\n"
"	 | = ISAMPLER2DARRAY	$$ = ??\n"
"	 | = ISAMPLERCUBEARRAY	$$ = ??\n"
"	 | = USAMPLER1D	$$ = ??\n"
"	 | = USAMPLER2D	$$ = ??\n"
"	 | = USAMPLER3D	$$ = ??\n"
"	 | = USAMPLERCUBE	$$ = ??\n"
"	 | = USAMPLER1DARRAY	$$ = ??\n"
"	 | = USAMPLER2DARRAY	$$ = ??\n"
"	 | = USAMPLERCUBEARRAY	$$ = ??\n"
"	 | = SAMPLER2DRECT	$$ = ??\n"
"	 | = SAMPLER2DRECTSHADOW	$$ = ??\n"
"	 | = ISAMPLER2DRECT	$$ = ??\n"
"	 | = USAMPLER2DRECT	$$ = ??\n"
"	 | = SAMPLERBUFFER	$$ = ??\n"
"	 | = ISAMPLERBUFFER	$$ = ??\n"
"	 | = USAMPLERBUFFER	$$ = ??\n"
"	 | = SAMPLER2DMS	$$ = ??\n"
"	 | = ISAMPLER2DMS	$$ = ??\n"
"	 | = USAMPLER2DMS	$$ = ??\n"
"	 | = SAMPLER2DMSARRAY	$$ = ??\n"
"	 | = ISAMPLER2DMSARRAY	$$ = ??\n"
"	 | = USAMPLER2DMSARRAY	$$ = ??\n"
"	 | = StructSpecifier	$$ = ??\n"
"	 | = TYPE_NAME	$$ = ??\n"
"\n"
"PrecisionQualifier\n"
"	 : = HIGHP	$$ = ??\n"
"	 | = MEDIUMP	$$ = ??\n"
"	 | = LOWP	$$ = ??\n"
"\n"
"StructSpecifier\n"
"	 : = STRUCT IDENTIFIER LEFT_BRACE StructDeclarationList RIGHT_BRACE	$$ = ??\n"
"	 | = STRUCT LEFT_BRACE StructDeclarationList RIGHT_BRACE	$$ = ??\n"
"\n"
"StructDeclarationList\n"
"	 : = StructDeclaration	$$ = ??\n"
"	 | = StructDeclarationList StructDeclaration	$$ = ??\n"
"\n"
"StructDeclaration\n"
"	 : = TypeSpecifier StructDeclaratorList SEMICOLON	$$ = ??\n"
"	 | = TypeQualifier TypeSpecifier StructDeclaratorList SEMICOLON	$$ = ??\n"
"\n"
"StructDeclaratorList\n"
"	 : = StructDeclarator	$$ = ??\n"
"	 | = StructDeclaratorList COMMA StructDeclarator	$$ = ??\n"
"\n"
"StructDeclarator\n"
"	 : = IDENTIFIER	$$ = ??\n"
"	 | = IDENTIFIER LEFT_BRACKET RIGHT_BRACKET	$$ = ??\n"
"	 | = IDENTIFIER LEFT_BRACKET ConstantExpression RIGHT_BRACKET	$$ = ??\n"
"\n"
"Initializer\n"
"	 : = AssignmentExpression	$$ = ??\n"
"\n"
"DeclarationStatement\n"
"	 : = Declaration	$$ = ??\n"
"\n"
"Statement\n"
"	 : = CompoundStatement	$$ = ??\n"
"	 | = SimpleStatement	$$ = ??\n"
"\n"
"SimpleStatement\n"
"	 : = DeclarationStatement	$$ = ??\n"
"	 | = ExpressionStatement	$$ = ??\n"
"	 | = SelectionStatement	$$ = ??\n"
"	 | = SwitchStatement	$$ = ??\n"
"	 | = CaseLabel	$$ = ??\n"
"	 | = IterationStatement	$$ = ??\n"
"	 | = JumpStatement	$$ = ??\n"
"\n"
"CompoundStatement\n"
"	 : = LEFT_BRACE RIGHT_BRACE	$$ = ??\n"
"	 | = LEFT_BRACE StatementList RIGHT_BRACE	$$ = ??\n"
"\n"
"StatementNoNewScope\n"
"	 : = CompoundStatementNoNewScope	$$ = ??\n"
"	 | = SimpleStatement	$$ = ??\n"
"\n"
"CompoundStatementNoNewScope\n"
"	 : = LEFT_BRACE RIGHT_BRACE	$$ = ??\n"
"	 | = LEFT_BRACE StatementList RIGHT_BRACE	$$ = ??\n"
"\n"
"StatementList\n"
"	 : = Statement	$$ = ??\n"
"	 | = StatementList Statement	$$ = ??\n"
"\n"
"ExpressionStatement\n"
"	 : = SEMICOLON	$$ = ??\n"
"	 | = Expression SEMICOLON	$$ = ??\n"
"\n"
"SelectionStatement\n"
"	 : = IF LEFT_PAREN Expression RIGHT_PAREN SelectionRestStatement	$$ = ??\n"
"\n"
"SelectionRestStatement\n"
"	 : = Statement ELSE Statement	$$ = ??\n"
"	 | = Statement	$$ = ??\n"
"\n"
"Condition\n"
"	 : = Expression	$$ = ??\n"
"	 | = FullySpecifiedType IDENTIFIER EQUAL Initializer	$$ = ??\n"
"\n"
"SwitchStatement\n"
"	 : = SWITCH LEFT_PAREN Expression RIGHT_PAREN LEFT_BRACE SwitchStatementList RIGHT_BRACE	$$ = ??\n"
"\n"
"SwitchStatementList\n"
"	 : = Empty	$$ = ??\n"
"	 | = StatementList	$$ = ??\n"
"\n"
"CaseLabel\n"
"	 : = CASE Expression COLON	$$ = ??\n"
"	 | = DEFAULT COLON	$$ = ??\n"
"\n"
"IterationStatement\n"
"	 : = WHILE LEFT_PAREN Condition RIGHT_PAREN StatementNoNewScope	$$ = ??\n"
"	 | = DO Statement WHILE LEFT_PAREN Expression RIGHT_PAREN SEMICOLON	$$ = ??\n"
"	 | = FOR LEFT_PAREN ForInitStatement ForRestStatement RIGHT_PAREN StatementNoNewScope	$$ = ??\n"
"\n"
"ForInitStatement\n"
"	 : = ExpressionStatement	$$ = ??\n"
"	 | = DeclarationStatement	$$ = ??\n"
"\n"
"Conditionopt\n"
"	 : = Empty	$$ = ??\n"
"	 | = Condition	$$ = ??\n"
"\n"
"ForRestStatement\n"
"	 : = Conditionopt SEMICOLON	$$ = ??\n"
"	 | = Conditionopt SEMICOLON Expression	$$ = ??\n"
"\n"
"JumpStatement\n"
"	 : = CONTINUE SEMICOLON	$$ = ??\n"
"	 | = BREAK SEMICOLON	$$ = ??\n"
"	 | = RETURN SEMICOLON	$$ = ??\n"
"	 | = RETURN Expression SEMICOLON	$$ = ??\n"
"	 | = DISCARD SEMICOLON	$$ = ??\n"
"\n"
"TranslationUnit\n"
"	 : = ExternalDeclaration	$$ = ??\n"
"	 | = TranslationUnit ExternalDeclaration	$$ = ??\n"
"\n"
"ExternalDeclaration\n"
"	 : = FunctionDefinition	$$ = ??\n"
"	 | = Declaration	$$ = ??\n"
"	 | = SEMICOLON	$$ = ??\n"
"\n"
"FunctionDefinition\n"
"	 : = FunctionPrototype CompoundStatementNoNewScope	$$ = ??\n"
"\n"
"Identifier\n"
"	: identifier	$$ = symbol($1)\n"
"\n"
"Number\n"
"	: number		$$ = constant($1)\n"
"\n"
"String\n"
"	: string		$$ = literal($1)\n"
"\n"
"Empty\n"
"	 : = 	$$ = ??\n"
