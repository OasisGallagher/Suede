// Warning: this file is generated by wrapper.py.

#pragma once

#include "layermanager.h"

#include "lua++.h"
#include "tools/string.h"

class Layer_Wrapper {
	static int NewLayer(lua_State* L) {
		return Lua::newObject<Layer>(L);
	}

	static int ToString(lua_State* L) {
		Layer* _p = Lua::callerPtr<Layer>(L);

		lua_pushstring(L, String::Format("Layer@0x%p", _p).c_str());
		return 1;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Layer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewLayer", NewLayer });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Layer> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Layer>(L, metalib, nullptr);
	}
};

class LayerManager_Wrapper {
	static int NewLayerManager(lua_State* L) {
		return Lua::newObject<LayerManager>(L);
	}

	static int ToString(lua_State* L) {
		LayerManager* _p = Lua::callerPtr<LayerManager>(L);

		lua_pushstring(L, String::Format("LayerManager@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static LayerManager");
		return 1;
	}

	static int LayerManagerStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "NameToLayer", NameToLayer },
			{ "LayerToName", LayerToName },
			{ "AddLayer", AddLayer },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static uint NameToLayer(const std::string& name)
	static int NameToLayer(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, LayerManager::NameToLayer(name));
	}

	// static std::string LayerToName(uint layer)
	static int LayerToName(lua_State* L) {
		uint layer = Lua::get<uint>(L, 1);
		
		return Lua::push(L, LayerManager::LayerToName(layer));
	}

	// static uint AddLayer(const std::string& name)
	static int AddLayer(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, LayerManager::AddLayer(name));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<LayerManager>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewLayerManager", NewLayerManager });

		fields.push_back(luaL_Reg{ "LayerManager", LayerManagerStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<LayerManager> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<LayerManager>(L, metalib, nullptr);
	}
};
