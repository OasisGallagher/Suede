// Warning: this file is generated by wrapper.py.

#pragma once

#include "color.h"

#include "lua++.h"
#include "tools/string.h"

class Color_Wrapper {
	static int NewColor(lua_State* L) {
		if (Lua::checkArguments(L, 1)) {
			return Lua::newObject<Color>(L);
		}

		if (Lua::checkArguments<float, float, float, float>(L, 1)) {
			float a = Lua::get<float>(L, 4);
			float b = Lua::get<float>(L, 3);
			float g = Lua::get<float>(L, 2);
			float r = Lua::get<float>(L, 1);
		
			return Lua::newObject<Color>(L, r, g, b, a);
		}

		if (Lua::checkArguments<float, float, float>(L, 1)) {
			float b = Lua::get<float>(L, 3);
			float g = Lua::get<float>(L, 2);
			float r = Lua::get<float>(L, 1);
		
			return Lua::newObject<Color>(L, r, g, b);
		}

		Debug::LogError("failed to call \"Color\", invalid arguments.");
		return 0;
	}

	static int ToString(lua_State* L) {
		Color* _p = Lua::callerPtr<Color>(L);

		lua_pushstring(L, String::Format("Color@0x%p", _p).c_str());
		return 1;
	}

	// float GetLuminance()
	static int GetLuminance(lua_State* L) {
		Color* _p = Lua::callerPtr<Color>(L);
		return Lua::push(L, _p->GetLuminance());
	}

	// void Set(float r, float g, float b, float a = 1)
	static int Set(lua_State* L) {
		Color* _p = Lua::callerPtr<Color>(L);
		if (Lua::checkArguments<float, float, float, float>(L, 2)) {
			float a = Lua::get<float>(L, 5);
			float b = Lua::get<float>(L, 4);
			float g = Lua::get<float>(L, 3);
			float r = Lua::get<float>(L, 2);
			
			_p->Set(r, g, b, a);
			return 0;
		}

		if (Lua::checkArguments<float, float, float>(L, 2)) {
			float b = Lua::get<float>(L, 4);
			float g = Lua::get<float>(L, 3);
			float r = Lua::get<float>(L, 2);
			
			_p->Set(r, g, b);
			return 0;
		}

		Debug::LogError("failed to call \"Set\", invalid arguments.");
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Color>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewColor", NewColor });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Color> },
			{ "__tostring", ToString }, 
			{ "GetLuminance", GetLuminance },
			{ "Set", Set },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Color>(L, metalib, nullptr);
	}
};
