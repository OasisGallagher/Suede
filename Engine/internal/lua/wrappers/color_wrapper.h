// Warning: this file is generated by wrapper.py.

#pragma once

#include "color.h"

#include "lua++.h"
#include "tools/string.h"

class Color_Wrapper {
	static int NewColor(lua_State* L) {
		return Lua::newObject<Color>(L);
	}

	static int ToString(lua_State* L) {
		Color* _p = Lua::callerPtr<Color>(L, 0);
		lua_pushstring(L, String::Format("Color@0x%p", _p).c_str());
		return 1;
	}

	// float GetLuminance()
	static int GetLuminance(lua_State* L) {
		Color* _p = Lua::callerPtr<Color>(L, 0);
		return Lua::push(L, _p->GetLuminance());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Color>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewColor", NewColor });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Color> },
			{ "__tostring", ToString }, 
			{ "GetLuminance", GetLuminance },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Color>(L, metalib, nullptr);
	}
};
