// Warning: this file is generated by wrapper.py.

#pragma once

#include "../luax.h"
#include "statistics.h"

class Statistics_Wrapper {
	static int StatisticsInstance(lua_State* L) {
		return Lua::reference<Statistics>(L);
	}

	static int AddTriangles(lua_State* L) {
		Statistics* _p = Statistics::instance();
		uint n = Lua::get<uint>(L, -1);
		_p->AddTriangles(n);
		return 0;
	}

	static int AddDrawcalls(lua_State* L) {
		Statistics* _p = Statistics::instance();
		uint n = Lua::get<uint>(L, -1);
		_p->AddDrawcalls(n);
		return 0;
	}

	static int GetTriangles(lua_State* L) {
		Statistics* _p = Statistics::instance();
		return Lua::push(L, _p->GetTriangles());
	}

	static int GetDrawcalls(lua_State* L) {
		Statistics* _p = Statistics::instance();
		return Lua::push(L, _p->GetDrawcalls());
	}

	static int GetFrameRate(lua_State* L) {
		Statistics* _p = Statistics::instance();
		return Lua::push(L, _p->GetFrameRate());
	}

	static int SetCullingElapsed(lua_State* L) {
		Statistics* _p = Statistics::instance();
		double value = Lua::get<double>(L, -1);
		_p->SetCullingElapsed(value);
		return 0;
	}

	static int SetRenderingElapsed(lua_State* L) {
		Statistics* _p = Statistics::instance();
		double value = Lua::get<double>(L, -1);
		_p->SetRenderingElapsed(value);
		return 0;
	}

	static int GetCullingElapsed(lua_State* L) {
		Statistics* _p = Statistics::instance();
		return Lua::push(L, _p->GetCullingElapsed());
	}

	static int GetRenderingElapsed(lua_State* L) {
		Statistics* _p = Statistics::instance();
		return Lua::push(L, _p->GetRenderingElapsed());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Statistics>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "StatisticsInstance", StatisticsInstance });

		luaL_Reg metalib[] = {
			{ "AddTriangles", AddTriangles },
			{ "AddDrawcalls", AddDrawcalls },
			{ "GetTriangles", GetTriangles },
			{ "GetDrawcalls", GetDrawcalls },
			{ "GetFrameRate", GetFrameRate },
			{ "SetCullingElapsed", SetCullingElapsed },
			{ "SetRenderingElapsed", SetRenderingElapsed },
			{ "GetCullingElapsed", GetCullingElapsed },
			{ "GetRenderingElapsed", GetRenderingElapsed },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Statistics>(L, metalib, nullptr);
	}
};
