// Warning: this file is generated by wrapper.py.

#pragma once

#include "statistics.h"

#include "lua++.h"
#include "tools/string.h"

class Statistics_Wrapper {
	static int ToString(lua_State* L) {
		Statistics* _p = Lua::callerPtr<Statistics>(L);

		lua_pushstring(L, String::Format("Statistics@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static Statistics");
		return 1;
	}

	static int StatisticsStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "AddTriangles", AddTriangles },
			{ "AddDrawcalls", AddDrawcalls },
			{ "GetTriangles", GetTriangles },
			{ "GetDrawcalls", GetDrawcalls },
			{ "GetFrameRate", GetFrameRate },
			{ "SetScriptElapsed", SetScriptElapsed },
			{ "GetScriptElapsed", GetScriptElapsed },
			{ "SetCullingElapsed", SetCullingElapsed },
			{ "GetCullingElapsed", GetCullingElapsed },
			{ "SetRenderingElapsed", SetRenderingElapsed },
			{ "GetRenderingElapsed", GetRenderingElapsed },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void AddTriangles(uint n)
	static int AddTriangles(lua_State* L) {
		uint n = Lua::get<uint>(L, 1);
		
		Statistics::AddTriangles(n);
		return 0;
	}

	// static void AddDrawcalls(uint n)
	static int AddDrawcalls(lua_State* L) {
		uint n = Lua::get<uint>(L, 1);
		
		Statistics::AddDrawcalls(n);
		return 0;
	}

	// static uint GetTriangles()
	static int GetTriangles(lua_State* L) {
		return Lua::push(L, Statistics::GetTriangles());
	}

	// static uint GetDrawcalls()
	static int GetDrawcalls(lua_State* L) {
		return Lua::push(L, Statistics::GetDrawcalls());
	}

	// static float GetFrameRate()
	static int GetFrameRate(lua_State* L) {
		return Lua::push(L, Statistics::GetFrameRate());
	}

	// static void SetScriptElapsed(double value)
	static int SetScriptElapsed(lua_State* L) {
		double value = Lua::get<double>(L, 1);
		
		Statistics::SetScriptElapsed(value);
		return 0;
	}

	// static double GetScriptElapsed()
	static int GetScriptElapsed(lua_State* L) {
		return Lua::push(L, Statistics::GetScriptElapsed());
	}

	// static void SetCullingElapsed(double value)
	static int SetCullingElapsed(lua_State* L) {
		double value = Lua::get<double>(L, 1);
		
		Statistics::SetCullingElapsed(value);
		return 0;
	}

	// static double GetCullingElapsed()
	static int GetCullingElapsed(lua_State* L) {
		return Lua::push(L, Statistics::GetCullingElapsed());
	}

	// static void SetRenderingElapsed(double value)
	static int SetRenderingElapsed(lua_State* L) {
		double value = Lua::get<double>(L, 1);
		
		Statistics::SetRenderingElapsed(value);
		return 0;
	}

	// static double GetRenderingElapsed()
	static int GetRenderingElapsed(lua_State* L) {
		return Lua::push(L, Statistics::GetRenderingElapsed());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Statistics>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "Statistics", StatisticsStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Statistics> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Statistics>(L, metalib, nullptr);
	}
};
