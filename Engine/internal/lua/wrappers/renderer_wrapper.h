// Warning: this file is generated by wrapper.py.

#pragma once

#include "lua++.h"
#include "renderer.h"

class Renderer_Wrapper {
	static int AddMaterial(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 1);
		Material material = Lua::get<Material>(L, 2);
		_p->AddMaterial(material);
		return 0;
	}

	static int GetMaterial(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 1);
		uint index = Lua::get<uint>(L, 2);
		return Lua::push(L, _p->GetMaterial(index));
	}

	static int GetMaterials(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 0);
		IRenderer::Enumerable _r = _p->GetMaterials();
		return Lua::pushList(L, std::vector<IRenderer::Enumerable::value_type>(_r.begin(), _r.end()));
	}

	static int SetMaterial(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 2);
		Material value = Lua::get<Material>(L, 3);
		uint index = Lua::get<uint>(L, 2);
		_p->SetMaterial(index, value);
		return 0;
	}

	static int RemoveMaterial(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 1);
		Material material = Lua::get<Material>(L, 2);
		_p->RemoveMaterial(material);
		return 0;
	}

	static int RemoveMaterialAt(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 1);
		uint index = Lua::get<uint>(L, 2);
		_p->RemoveMaterialAt(index);
		return 0;
	}

	static int GetMaterialCount(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 0);
		return Lua::push(L, _p->GetMaterialCount());
	}

	static int UpdateMaterialProperties(lua_State* L) {
		Renderer& _p = *Lua::callerSharedPtr<Renderer>(L, 0);
		_p->UpdateMaterialProperties();
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Renderer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<Renderer> },
			{ "AddMaterial", AddMaterial },
			{ "GetMaterial", GetMaterial },
			{ "GetMaterials", GetMaterials },
			{ "SetMaterial", SetMaterial },
			{ "RemoveMaterial", RemoveMaterial },
			{ "RemoveMaterialAt", RemoveMaterialAt },
			{ "GetMaterialCount", GetMaterialCount },
			{ "UpdateMaterialProperties", UpdateMaterialProperties },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Renderer>(L, metalib, Lua::metatableName<Component>());
	}
};

class MeshRenderer_Wrapper {
public:
	static void create(lua_State* L) {
		Lua::createMetatable<MeshRenderer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<MeshRenderer> },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<MeshRenderer>(L, metalib, Lua::metatableName<Renderer>());
	}
};

class ParticleRenderer_Wrapper {
public:
	static void create(lua_State* L) {
		Lua::createMetatable<ParticleRenderer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<ParticleRenderer> },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<ParticleRenderer>(L, metalib, Lua::metatableName<Renderer>());
	}
};

class SkinnedMeshRenderer_Wrapper {
	static int SetSkeleton(lua_State* L) {
		SkinnedMeshRenderer& _p = *Lua::callerSharedPtr<SkinnedMeshRenderer>(L, 1);
		Skeleton value = Lua::get<Skeleton>(L, 2);
		_p->SetSkeleton(value);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<SkinnedMeshRenderer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<SkinnedMeshRenderer> },
			{ "SetSkeleton", SetSkeleton },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<SkinnedMeshRenderer>(L, metalib, Lua::metatableName<Renderer>());
	}
};
