// Warning: this file is generated by wrapper.py.

#pragma once

#include "../luax.h"
#include "transform.h"

class Transform_Wrapper {
	static int IsAttachedToScene(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->IsAttachedToScene());
	}

	static int AddChild(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		Transform child = Lua::get<Transform>(L, -1);
		_p->AddChild(child);
		return 0;
	}

	static int RemoveChild(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		Transform child = Lua::get<Transform>(L, -1);
		_p->RemoveChild(child);
		return 0;
	}

	static int RemoveChildAt(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		uint index = Lua::get<uint>(L, -1);
		_p->RemoveChildAt(index);
		return 0;
	}

	static int SetParent(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		Transform value = Lua::get<Transform>(L, -1);
		_p->SetParent(value);
		return 0;
	}

	static int GetParent(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetParent());
	}

	static int TransformPoint(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 point = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->TransformPoint(point));
	}

	static int TransformDirection(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 direction = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->TransformDirection(direction));
	}

	static int InverseTransformPoint(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 point = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->InverseTransformPoint(point));
	}

	static int InverseTransformDirection(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 direction = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->InverseTransformDirection(direction));
	}

	static int FindChild(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		std::string path = Lua::get<std::string>(L, -1);
		return Lua::push(L, _p->FindChild(path));
	}

	static int GetChildCount(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetChildCount());
	}

	static int GetChildAt(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		int i = Lua::get<int>(L, -1);
		return Lua::push(L, _p->GetChildAt(i));
	}

	static int GetChildren(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		ITransform::Enumerable _r = _p->GetChildren();
		return Lua::pushList(L, std::vector<ITransform::Enumerable::value_type>(_r.begin(), _r.end()));
	}

	static int SetScale(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetScale(value);
		return 0;
	}

	static int SetPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetPosition(value);
		return 0;
	}

	static int SetRotation(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::quat value = Lua::get<glm::quat>(L, -1);
		_p->SetRotation(value);
		return 0;
	}

	static int SetEulerAngles(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetEulerAngles(value);
		return 0;
	}

	static int GetScale(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetScale());
	}

	static int GetPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetPosition());
	}

	static int GetRotation(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetRotation());
	}

	static int GetEulerAngles(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetEulerAngles());
	}

	static int SetLocalScale(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetLocalScale(value);
		return 0;
	}

	static int SetLocalPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetLocalPosition(value);
		return 0;
	}

	static int SetLocalRotation(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::quat value = Lua::get<glm::quat>(L, -1);
		_p->SetLocalRotation(value);
		return 0;
	}

	static int SetLocalEulerAngles(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 value = Lua::get<glm::vec3>(L, -1);
		_p->SetLocalEulerAngles(value);
		return 0;
	}

	static int GetLocalScale(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetLocalScale());
	}

	static int GetLocalPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetLocalPosition());
	}

	static int GetLocalRotation(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetLocalRotation());
	}

	static int GetLocalEulerAngles(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetLocalEulerAngles());
	}

	static int GetLocalToWorldMatrix(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetLocalToWorldMatrix());
	}

	static int GetWorldToLocalMatrix(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetWorldToLocalMatrix());
	}

	static int GetLocalToWorldPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 position = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->GetLocalToWorldPosition(position));
	}

	static int GetWorldToLocalPosition(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 1);
		glm::vec3 position = Lua::get<glm::vec3>(L, -1);
		return Lua::push(L, _p->GetWorldToLocalPosition(position));
	}

	static int GetUp(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetUp());
	}

	static int GetRight(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetRight());
	}

	static int GetForward(lua_State* L) {
		Transform& _p = *Lua::callerSharedPtr<Transform>(L, 0);
		return Lua::push(L, _p->GetForward());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Transform>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<Transform> },
			{ "IsAttachedToScene", IsAttachedToScene },
			{ "AddChild", AddChild },
			{ "RemoveChild", RemoveChild },
			{ "RemoveChildAt", RemoveChildAt },
			{ "SetParent", SetParent },
			{ "GetParent", GetParent },
			{ "TransformPoint", TransformPoint },
			{ "TransformDirection", TransformDirection },
			{ "InverseTransformPoint", InverseTransformPoint },
			{ "InverseTransformDirection", InverseTransformDirection },
			{ "FindChild", FindChild },
			{ "GetChildCount", GetChildCount },
			{ "GetChildAt", GetChildAt },
			{ "GetChildren", GetChildren },
			{ "SetScale", SetScale },
			{ "SetPosition", SetPosition },
			{ "SetRotation", SetRotation },
			{ "SetEulerAngles", SetEulerAngles },
			{ "GetScale", GetScale },
			{ "GetPosition", GetPosition },
			{ "GetRotation", GetRotation },
			{ "GetEulerAngles", GetEulerAngles },
			{ "SetLocalScale", SetLocalScale },
			{ "SetLocalPosition", SetLocalPosition },
			{ "SetLocalRotation", SetLocalRotation },
			{ "SetLocalEulerAngles", SetLocalEulerAngles },
			{ "GetLocalScale", GetLocalScale },
			{ "GetLocalPosition", GetLocalPosition },
			{ "GetLocalRotation", GetLocalRotation },
			{ "GetLocalEulerAngles", GetLocalEulerAngles },
			{ "GetLocalToWorldMatrix", GetLocalToWorldMatrix },
			{ "GetWorldToLocalMatrix", GetWorldToLocalMatrix },
			{ "GetLocalToWorldPosition", GetLocalToWorldPosition },
			{ "GetWorldToLocalPosition", GetWorldToLocalPosition },
			{ "GetUp", GetUp },
			{ "GetRight", GetRight },
			{ "GetForward", GetForward },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Transform>(L, metalib, Lua::metatableName<Component>());
	}
};
