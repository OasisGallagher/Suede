// Warning: this file is generated by wrapper.py.

#pragma once

#include "transform.h"

#include "lua++.h"
#include "tools/string.h"

class PRS_Wrapper {
	static int NewPRS(lua_State* L) {
		return Lua::newObject<PRS>(L);
	}

	static int ToString(lua_State* L) {
		PRS* _p = Lua::callerPtr<PRS>(L);

		lua_pushstring(L, String::Format("PRS@0x%p", _p).c_str());
		return 1;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<PRS>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewPRS", NewPRS });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<PRS> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<PRS>(L, metalib, nullptr);
	}
};

class Transform_Wrapper {
	static int NewTransform(lua_State* L) {
		return Lua::newObject<Transform>(L);
	}

	static int ToString(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);

		lua_pushstring(L, String::Format("Transform@0x%p", _p).c_str());
		return 1;
	}

	// bool IsAttachedToScene()
	static int IsAttachedToScene(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->IsAttachedToScene());
	}

	// void RemoveChildAt(uint index)
	static int RemoveChildAt(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		uint index = Lua::get<uint>(L, 2);
		
		_p->RemoveChildAt(index);
		return 0;
	}

	// Vector3 TransformPoint(const Vector3& point)
	static int TransformPoint(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 point = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->TransformPoint(point));
	}

	// Vector3 TransformDirection(const Vector3& direction)
	static int TransformDirection(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 direction = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->TransformDirection(direction));
	}

	// Vector3 InverseTransformPoint(const Vector3& point)
	static int InverseTransformPoint(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 point = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->InverseTransformPoint(point));
	}

	// Vector3 InverseTransformDirection(const Vector3& direction)
	static int InverseTransformDirection(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 direction = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->InverseTransformDirection(direction));
	}

	// int GetChildCount()
	static int GetChildCount(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetChildCount());
	}

	// void SetScale(const Vector3& value)
	static int SetScale(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetScale(value);
		return 0;
	}

	// void SetPosition(const Vector3& value)
	static int SetPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetPosition(value);
		return 0;
	}

	// void SetRotation(const Quaternion& value)
	static int SetRotation(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Quaternion value = Lua::get<Quaternion>(L, 2);
		
		_p->SetRotation(value);
		return 0;
	}

	// void SetEulerAngles(const Vector3& value)
	static int SetEulerAngles(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetEulerAngles(value);
		return 0;
	}

	// Vector3 GetScale()
	static int GetScale(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetScale());
	}

	// Vector3 GetPosition()
	static int GetPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetPosition());
	}

	// Quaternion GetRotation()
	static int GetRotation(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetRotation());
	}

	// Vector3 GetEulerAngles()
	static int GetEulerAngles(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetEulerAngles());
	}

	// void SetLocalScale(const Vector3& value)
	static int SetLocalScale(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetLocalScale(value);
		return 0;
	}

	// void SetLocalPosition(const Vector3& value)
	static int SetLocalPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetLocalPosition(value);
		return 0;
	}

	// void SetLocalRotation(const Quaternion& value)
	static int SetLocalRotation(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Quaternion value = Lua::get<Quaternion>(L, 2);
		
		_p->SetLocalRotation(value);
		return 0;
	}

	// void SetLocalEulerAngles(const Vector3& value)
	static int SetLocalEulerAngles(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 value = Lua::get<Vector3>(L, 2);
		
		_p->SetLocalEulerAngles(value);
		return 0;
	}

	// Vector3 GetLocalScale()
	static int GetLocalScale(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetLocalScale());
	}

	// Vector3 GetLocalPosition()
	static int GetLocalPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetLocalPosition());
	}

	// Quaternion GetLocalRotation()
	static int GetLocalRotation(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetLocalRotation());
	}

	// Vector3 GetLocalEulerAngles()
	static int GetLocalEulerAngles(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetLocalEulerAngles());
	}

	// Matrix4 GetLocalToWorldMatrix()
	static int GetLocalToWorldMatrix(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetLocalToWorldMatrix());
	}

	// Matrix4 GetWorldToLocalMatrix()
	static int GetWorldToLocalMatrix(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetWorldToLocalMatrix());
	}

	// Vector3 GetLocalToWorldPosition(const Vector3& position)
	static int GetLocalToWorldPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 position = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->GetLocalToWorldPosition(position));
	}

	// Vector3 GetWorldToLocalPosition(const Vector3& position)
	static int GetWorldToLocalPosition(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		Vector3 position = Lua::get<Vector3>(L, 2);
		
		return Lua::push(L, _p->GetWorldToLocalPosition(position));
	}

	// Vector3 GetUp()
	static int GetUp(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetUp());
	}

	// Vector3 GetRight()
	static int GetRight(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetRight());
	}

	// Vector3 GetForward()
	static int GetForward(lua_State* L) {
		Transform* _p = Lua::callerPtr<Transform>(L);
		return Lua::push(L, _p->GetForward());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Transform>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewTransform", NewTransform });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Transform> },
			{ "__tostring", ToString }, 
			{ "IsAttachedToScene", IsAttachedToScene },
			{ "RemoveChildAt", RemoveChildAt },
			{ "TransformPoint", TransformPoint },
			{ "TransformDirection", TransformDirection },
			{ "InverseTransformPoint", InverseTransformPoint },
			{ "InverseTransformDirection", InverseTransformDirection },
			{ "GetChildCount", GetChildCount },
			{ "SetScale", SetScale },
			{ "SetPosition", SetPosition },
			{ "SetRotation", SetRotation },
			{ "SetEulerAngles", SetEulerAngles },
			{ "GetScale", GetScale },
			{ "GetPosition", GetPosition },
			{ "GetRotation", GetRotation },
			{ "GetEulerAngles", GetEulerAngles },
			{ "SetLocalScale", SetLocalScale },
			{ "SetLocalPosition", SetLocalPosition },
			{ "SetLocalRotation", SetLocalRotation },
			{ "SetLocalEulerAngles", SetLocalEulerAngles },
			{ "GetLocalScale", GetLocalScale },
			{ "GetLocalPosition", GetLocalPosition },
			{ "GetLocalRotation", GetLocalRotation },
			{ "GetLocalEulerAngles", GetLocalEulerAngles },
			{ "GetLocalToWorldMatrix", GetLocalToWorldMatrix },
			{ "GetWorldToLocalMatrix", GetWorldToLocalMatrix },
			{ "GetLocalToWorldPosition", GetLocalToWorldPosition },
			{ "GetWorldToLocalPosition", GetWorldToLocalPosition },
			{ "GetUp", GetUp },
			{ "GetRight", GetRight },
			{ "GetForward", GetForward },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Transform>(L, metalib, TypeID<Component>::string());
	}
};
