// Warning: this file is generated by wrapper.py.

#pragma once

#include "engine.h"

#include "lua++.h"
#include "tools/string.h"

class Engine_Wrapper {
	static int ToString(lua_State* L) {
		Engine* _p = Lua::callerPtr<Engine>(L);

		lua_pushstring(L, String::Format("Engine@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static Engine");
		return 1;
	}

	static int EngineStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "Startup", Startup },
			{ "Shutdown", Shutdown },
			{ "Update", Update },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static bool Startup(uint width, uint height)
	static int Startup(lua_State* L) {
		uint height = Lua::get<uint>(L, 2);
		uint width = Lua::get<uint>(L, 1);
		
		return Lua::push(L, Engine::Startup(width, height));
	}

	// static void Shutdown()
	static int Shutdown(lua_State* L) {
		Engine::Shutdown();
		return 0;
	}

	// static void Update()
	static int Update(lua_State* L) {
		Engine::Update();
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Engine>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "Engine", EngineStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Engine> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Engine>(L, metalib, nullptr);
	}
};
