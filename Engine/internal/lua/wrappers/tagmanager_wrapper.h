// Warning: this file is generated by wrapper.py.

#pragma once

#include "../luax.h"
#include "tagmanager.h"

class TagManager_Wrapper {
	static int TagManagerInstance(lua_State* L) {
		return Lua::reference<TagManager>(L);
	}

	static int Register(lua_State* L) {
		TagManager* _p = TagManager::instance();
		std::string name = Lua::get<std::string>(L, -1);
		_p->Register(name);
		return 0;
	}

	static int Unregister(lua_State* L) {
		TagManager* _p = TagManager::instance();
		std::string name = Lua::get<std::string>(L, -1);
		_p->Unregister(name);
		return 0;
	}

	static int IsRegistered(lua_State* L) {
		TagManager* _p = TagManager::instance();
		std::string name = Lua::get<std::string>(L, -1);
		return Lua::push(L, _p->IsRegistered(name));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<TagManager>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "TagManagerInstance", TagManagerInstance });

		luaL_Reg metalib[] = {
			{ "Register", Register },
			{ "Unregister", Unregister },
			{ "IsRegistered", IsRegistered },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<TagManager>(L, metalib, nullptr);
	}
};
