// Warning: this file is generated by wrapper.py.

#pragma once

#include "tags.h"

#include "lua++.h"
#include "tools/string.h"

class TagManager_Wrapper {
	static int ToString(lua_State* L) {
		TagManager* _p = Lua::callerPtr<TagManager>(L);

		lua_pushstring(L, String::Format("TagManager@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static TagManager");
		return 1;
	}

	static int TagManagerStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "Register", Register },
			{ "Unregister", Unregister },
			{ "IsRegistered", IsRegistered },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void Register(const std::string& name)
	static int Register(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		TagManager::Register(name);
		return 0;
	}

	// static void Unregister(const std::string& name)
	static int Unregister(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		TagManager::Unregister(name);
		return 0;
	}

	// static bool IsRegistered(const std::string& name)
	static int IsRegistered(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, TagManager::IsRegistered(name));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<TagManager>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "TagManager", TagManagerStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<TagManager> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<TagManager>(L, metalib, nullptr);
	}
};
