// Warning: this file is generated by wrapper.py.

#pragma once

#include "world.h"

#include "lua++.h"
#include "tools/string.h"

class World_Wrapper {
	static int WorldInstance(lua_State* L) {
		return Lua::reference<World>(L);
	}

	static int ToString(lua_State* L) {
		World* _p = World::instance();
		lua_pushstring(L, String::Format("World@0x%p", _p).c_str());
		return 1;
	}

	// void Initialize()
	static int Initialize(lua_State* L) {
		World* _p = World::instance();
		_p->Initialize();
		return 0;
	}

	// void CullingUpdate()
	static int CullingUpdate(lua_State* L) {
		World* _p = World::instance();
		_p->CullingUpdate();
		return 0;
	}

	// void RenderingUpdate()
	static int RenderingUpdate(lua_State* L) {
		World* _p = World::instance();
		_p->RenderingUpdate();
		return 0;
	}

	// void Finalize()
	static int Finalize(lua_State* L) {
		World* _p = World::instance();
		_p->Finalize();
		return 0;
	}

	// Object CreateObject(ObjectType type)
	static int CreateObject(lua_State* L) {
		World* _p = World::instance();
		ObjectType type = Lua::get<ObjectType>(L, 2);
		return Lua::push(L, _p->CreateObject(type));
	}

	// void DestroyGameObject(uint id)
	// void DestroyGameObject(GameObject go)
	static int DestroyGameObject(lua_State* L) {
		World* _p = World::instance();

		if (Lua::checkArguments<uint>(L, 2)) {
			uint id = Lua::get<uint>(L, 2);
			_p->DestroyGameObject(id);
			return 0;
		}

		if (Lua::checkArguments<GameObject>(L, 2)) {
			GameObject go = Lua::get<GameObject>(L, 2);
			_p->DestroyGameObject(go);
			return 0;
		}

		Debug::LogError("failed to call \"DestroyGameObject\", invalid arguments.");
		return 0;
	}

	// GameObject Import(const std::string& path, Lua::Func<void, GameObject, const std::string&> callback)
	static int Import(lua_State* L) {
		World* _p = World::instance();
		auto callback = lua_isnil(L, -1) ? nullptr : Lua::make_func<void, GameObject, const std::string&>(L);
		std::string path = Lua::get<std::string>(L, 2);
		return Lua::push(L, _p->Import(path, callback));
	}

	// Transform GetRootTransform()
	static int GetRootTransform(lua_State* L) {
		World* _p = World::instance();
		return Lua::push(L, _p->GetRootTransform());
	}

	// GameObject GetGameObject(uint id)
	static int GetGameObject(lua_State* L) {
		World* _p = World::instance();
		uint id = Lua::get<uint>(L, 2);
		return Lua::push(L, _p->GetGameObject(id));
	}

	// void FireEvent(WorldEventBasePtr e)
	static int FireEvent(lua_State* L) {
		World* _p = World::instance();
		WorldEventBasePtr e = Lua::get<WorldEventBasePtr>(L, 2);
		_p->FireEvent(e);
		return 0;
	}

	// void FireEventImmediate(WorldEventBasePtr e)
	static int FireEventImmediate(lua_State* L) {
		World* _p = World::instance();
		WorldEventBasePtr e = Lua::get<WorldEventBasePtr>(L, 2);
		_p->FireEventImmediate(e);
		return 0;
	}

	// void GetDecals(std::vector<Decal>& container)
	static int GetDecals(lua_State* L) {
		World* _p = World::instance();
		std::vector<Decal> container = Lua::getList<Decal>(L, 2);
		_p->GetDecals(container);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<World>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "WorldInstance", WorldInstance });

		luaL_Reg metalib[] = {
			{ "Initialize", Initialize },
			{ "CullingUpdate", CullingUpdate },
			{ "RenderingUpdate", RenderingUpdate },
			{ "Finalize", Finalize },
			{ "CreateObject", CreateObject },
			{ "DestroyGameObject", DestroyGameObject },
			{ "Import", Import },
			{ "GetRootTransform", GetRootTransform },
			{ "GetGameObject", GetGameObject },
			{ "FireEvent", FireEvent },
			{ "FireEventImmediate", FireEventImmediate },
			{ "GetDecals", GetDecals },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<World>(L, metalib, nullptr);
	}
};
