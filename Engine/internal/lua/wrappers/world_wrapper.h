// Warning: this file is generated by wrapper.py.

#pragma once

#include "world.h"

#include "lua++.h"
#include "tools/string.h"

class World_Wrapper {
	static int ToString(lua_State* L) {
		World* _p = Lua::callerPtr<World>(L);

		lua_pushstring(L, String::Format("World@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static World");
		return 1;
	}

	static int WorldStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "Initialize", Initialize },
			{ "Finalize", Finalize },
			{ "Update", Update },
			{ "CullingUpdate", CullingUpdate },
			{ "DestroyGameObject", DestroyGameObject },
			{ "Import", Import },
			{ "GetRootTransform", GetRootTransform },
			{ "GetGameObject", GetGameObject },
			{ "GetDecals", GetDecals },
			{ "GetGameObjectsOfComponent", GetGameObjectsOfComponent },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void Initialize()
	static int Initialize(lua_State* L) {
		World::Initialize();
		return 0;
	}

	// static void Finalize()
	static int Finalize(lua_State* L) {
		World::Finalize();
		return 0;
	}

	// static void Update()
	static int Update(lua_State* L) {
		World::Update();
		return 0;
	}

	// static void CullingUpdate()
	static int CullingUpdate(lua_State* L) {
		World::CullingUpdate();
		return 0;
	}

	// static void DestroyGameObject(uint id)
	// static void DestroyGameObject(GameObject go)
	static int DestroyGameObject(lua_State* L) {
		if (Lua::checkArguments<uint>(L, 2)) {
			uint id = Lua::get<uint>(L, 1);
			
			World::DestroyGameObject(id);
			return 0;
		}

		if (Lua::checkArguments<GameObject>(L, 2)) {
			GameObject go = Lua::get<GameObject>(L, 1);
			
			World::DestroyGameObject(go);
			return 0;
		}

		Debug::LogError("failed to call \"DestroyGameObject\", invalid arguments.");
		return 0;
	}

	// static GameObject Import(const std::string& path, Lua::Func<void, GameObject, const std::string&> callback)
	static int Import(lua_State* L) {
		auto callback = lua_isnil(L, -1) ? nullptr : Lua::make_func<void, GameObject, const std::string&>(L);
		std::string path = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, World::Import(path, callback));
	}

	// static Transform GetRootTransform()
	static int GetRootTransform(lua_State* L) {
		return Lua::push(L, World::GetRootTransform());
	}

	// static GameObject GetGameObject(uint id)
	static int GetGameObject(lua_State* L) {
		uint id = Lua::get<uint>(L, 1);
		
		return Lua::push(L, World::GetGameObject(id));
	}

	// static void GetDecals(std::vector<Decal>& container)
	static int GetDecals(lua_State* L) {
		std::vector<Decal> container = Lua::getList<Decal>(L, 1);
		
		World::GetDecals(container);
		return 0;
	}

	// static std::vector<GameObject> GetGameObjectsOfComponent(suede_guid guid)
	static int GetGameObjectsOfComponent(lua_State* L) {
		suede_guid guid = Lua::get<suede_guid>(L, 1);
		
		return Lua::pushList(L, World::GetGameObjectsOfComponent(guid));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<World>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "World", WorldStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<World> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<World>(L, metalib, nullptr);
	}
};
