// Warning: this file is generated by wrapper.py.

#pragma once

#include "physics.h"

#include "lua++.h"
#include "tools/string.h"

class Physics_Wrapper {
	static int ToString(lua_State* L) {
		Physics* _p = Lua::callerPtr<Physics>(L);

		lua_pushstring(L, String::Format("Physics@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static Physics");
		return 1;
	}

	static int PhysicsStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "SetGravity", SetGravity },
			{ "GetGravity", GetGravity },
			{ "SetDebugDrawEnabled", SetDebugDrawEnabled },
			{ "GetDebugDrawEnabled", GetDebugDrawEnabled },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void SetGravity(const glm::vec3& value)
	static int SetGravity(lua_State* L) {
		glm::vec3 value = Lua::get<glm::vec3>(L, 1);
		
		Physics::SetGravity(value);
		return 0;
	}

	// static glm::vec3 GetGravity()
	static int GetGravity(lua_State* L) {
		return Lua::push(L, Physics::GetGravity());
	}

	// static void SetDebugDrawEnabled(bool value)
	static int SetDebugDrawEnabled(lua_State* L) {
		bool value = Lua::get<bool>(L, 1);
		
		Physics::SetDebugDrawEnabled(value);
		return 0;
	}

	// static bool GetDebugDrawEnabled()
	static int GetDebugDrawEnabled(lua_State* L) {
		return Lua::push(L, Physics::GetDebugDrawEnabled());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Physics>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "Physics", PhysicsStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Physics> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Physics>(L, metalib, nullptr);
	}
};
