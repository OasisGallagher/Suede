// Warning: this file is generated by wrapper.py.

#pragma once

#include "environment.h"

#include "lua++.h"
#include "tools/string.h"

class Environment_Wrapper {
	static int EnvironmentInstance(lua_State* L) {
		return Lua::reference<Environment>(L);
	}

	static int ToString(lua_State* L) {
		Environment* _p = Environment::instance();

		lua_pushstring(L, String::Format("Environment@0x%p", _p).c_str());
		return 1;
	}

	// void SetSkybox(Material value)
	static int SetSkybox(lua_State* L) {
		Environment* _p = Environment::instance();
		Material value = Lua::get<Material>(L, 2);
		
		_p->SetSkybox(value);
		return 0;
	}

	// Material GetSkybox()
	static int GetSkybox(lua_State* L) {
		Environment* _p = Environment::instance();
		return Lua::push(L, _p->GetSkybox());
	}

	// void SetAmbientColor(const Color& value)
	static int SetAmbientColor(lua_State* L) {
		Environment* _p = Environment::instance();
		Color value = Lua::get<Color>(L, 2);
		
		_p->SetAmbientColor(value);
		return 0;
	}

	// Color GetAmbientColor()
	static int GetAmbientColor(lua_State* L) {
		Environment* _p = Environment::instance();
		return Lua::push(L, _p->GetAmbientColor());
	}

	// void SetFogColor(const Color& value)
	static int SetFogColor(lua_State* L) {
		Environment* _p = Environment::instance();
		Color value = Lua::get<Color>(L, 2);
		
		_p->SetFogColor(value);
		return 0;
	}

	// Color GetFogColor()
	static int GetFogColor(lua_State* L) {
		Environment* _p = Environment::instance();
		return Lua::push(L, _p->GetFogColor());
	}

	// void SetFogDensity(float value)
	static int SetFogDensity(lua_State* L) {
		Environment* _p = Environment::instance();
		float value = Lua::get<float>(L, 2);
		
		_p->SetFogDensity(value);
		return 0;
	}

	// float GetFogDensity()
	static int GetFogDensity(lua_State* L) {
		Environment* _p = Environment::instance();
		return Lua::push(L, _p->GetFogDensity());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Environment>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "EnvironmentInstance", EnvironmentInstance });

		luaL_Reg metalib[] = {
			{ "SetSkybox", SetSkybox },
			{ "GetSkybox", GetSkybox },
			{ "SetAmbientColor", SetAmbientColor },
			{ "GetAmbientColor", GetAmbientColor },
			{ "SetFogColor", SetFogColor },
			{ "GetFogColor", GetFogColor },
			{ "SetFogDensity", SetFogDensity },
			{ "GetFogDensity", GetFogDensity },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Environment>(L, metalib, nullptr);
	}
};
