// Warning: this file is generated by wrapper.py.

#pragma once

#include "lua++.h"
#include "imageeffect.h"

class ImageEffect_Wrapper {
	static int NewImageEffect(lua_State* L) {
		return Lua::newObject<ImageEffect>(L);
	}

	static int OnRenderImage(lua_State* L) {
		ImageEffect* _p = Lua::callerPtr<ImageEffect>(L, 3);
		Rect normalizedRect = Lua::get<Rect>(L, 4);
		RenderTexture dest = Lua::get<RenderTexture>(L, 3);
		RenderTexture src = Lua::get<RenderTexture>(L, 2);
		_p->OnRenderImage(src, dest, normalizedRect);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<ImageEffect>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "NewImageEffect", NewImageEffect });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<ImageEffect> },
			{ "OnRenderImage", OnRenderImage },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<ImageEffect>(L, metalib, Lua::metatableName<Behaviour>());
	}
};
