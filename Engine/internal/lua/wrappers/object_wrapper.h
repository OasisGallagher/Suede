// Warning: this file is generated by wrapper.py.

#pragma once

#include "object.h"

#include "lua++.h"
#include "tools/string.h"

class Object_Wrapper {
	static int ToString(lua_State* L) {
		Object& _p = *Lua::callerSharedPtr<Object>(L, 0);
		lua_pushstring(L, String::Format("Object@0x%p", _p.get()).c_str());
		return 1;
	}

	// Object Clone()
	static int Clone(lua_State* L) {
		Object& _p = *Lua::callerSharedPtr<Object>(L, 0);
		return Lua::push(L, _p->Clone());
	}

	// ObjectType GetObjectType()
	static int GetObjectType(lua_State* L) {
		Object& _p = *Lua::callerSharedPtr<Object>(L, 0);
		return Lua::push(L, _p->GetObjectType());
	}

	// uint GetInstanceID()
	static int GetInstanceID(lua_State* L) {
		Object& _p = *Lua::callerSharedPtr<Object>(L, 0);
		return Lua::push(L, _p->GetInstanceID());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Object>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<Object> },
			{ "__tostring", ToString }, 
			{ "Clone", Clone },
			{ "GetObjectType", GetObjectType },
			{ "GetInstanceID", GetInstanceID },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Object>(L, metalib, nullptr);
	}
};
