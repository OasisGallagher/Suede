// Warning: this file is generated by wrapper.py.

#pragma once

#include "behaviour.h"

#include "lua++.h"
#include "tools/string.h"

class Behaviour_Wrapper {
	static int ToString(lua_State* L) {
		Behaviour& _p = *Lua::callerIntrusivePtr<Behaviour>(L);

		lua_pushstring(L, String::Format("Behaviour@0x%p", _p.get()).c_str());
		return 1;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Behaviour>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<Behaviour> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Behaviour>(L, metalib, TypeID<Component>::string());
	}
};
