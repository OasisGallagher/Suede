// Warning: this file is generated by wrapper.py.

#pragma once

#include "graphics.h"

#include "lua++.h"
#include "tools/string.h"

class Graphics_Wrapper {
	static int ToString(lua_State* L) {
		Graphics* _p = Lua::callerPtr<Graphics>(L);

		lua_pushstring(L, String::Format("Graphics@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static Graphics");
		return 1;
	}

	static int GraphicsStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "SetShadingMode", SetShadingMode },
			{ "GetShadingMode", GetShadingMode },
			{ "SetAmbientOcclusionEnabled", SetAmbientOcclusionEnabled },
			{ "GetAmbientOcclusionEnabled", GetAmbientOcclusionEnabled },
			{ "SetRenderTarget", SetRenderTarget },
			{ "Draw", Draw },
			{ "Blit", Blit },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void SetShadingMode(ShadingMode value)
	static int SetShadingMode(lua_State* L) {
		ShadingMode value = Lua::get<ShadingMode>(L, 1);
		
		Graphics::SetShadingMode(value);
		return 0;
	}

	// static ShadingMode GetShadingMode()
	static int GetShadingMode(lua_State* L) {
		return Lua::push(L, Graphics::GetShadingMode());
	}

	// static void SetAmbientOcclusionEnabled(bool value)
	static int SetAmbientOcclusionEnabled(lua_State* L) {
		bool value = Lua::get<bool>(L, 1);
		
		Graphics::SetAmbientOcclusionEnabled(value);
		return 0;
	}

	// static bool GetAmbientOcclusionEnabled()
	static int GetAmbientOcclusionEnabled(lua_State* L) {
		return Lua::push(L, Graphics::GetAmbientOcclusionEnabled());
	}

	// static void SetRenderTarget(std::vector<uint>& colorBuffers, uint depthBuffer)
	static int SetRenderTarget(lua_State* L) {
		uint depthBuffer = Lua::get<uint>(L, 2);
		std::vector<uint> colorBuffers = Lua::getList<uint>(L, 1);
		
		Graphics::SetRenderTarget(colorBuffers, depthBuffer);
		return 0;
	}

	// static void Draw(Mesh mesh, Material material)
	static int Draw(lua_State* L) {
		Material material = Lua::get<Material>(L, 2);
		Mesh mesh = Lua::get<Mesh>(L, 1);
		
		Graphics::Draw(mesh, material);
		return 0;
	}

	// static void Blit(Texture src, RenderTexture dest)
	// static void Blit(Texture src, RenderTexture dest, const Rect& rect)
	// static void Blit(Texture src, RenderTexture dest, const Rect& srcRect, const Rect& destRect)
	// static void Blit(Texture src, RenderTexture dest, Material material)
	// static void Blit(Texture src, RenderTexture dest, Material material, const Rect& rect)
	// static void Blit(Texture src, RenderTexture dest, Material material, const Rect& srcRect, const Rect& destRect)
	static int Blit(lua_State* L) {

		if (Lua::checkArguments<Texture, RenderTexture>(L, 2)) {
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest);
			return 0;
		}

		if (Lua::checkArguments<Texture, RenderTexture, Rect>(L, 2)) {
			Rect rect = Lua::get<Rect>(L, 3);
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest, rect);
			return 0;
		}

		if (Lua::checkArguments<Texture, RenderTexture, Rect, Rect>(L, 2)) {
			Rect destRect = Lua::get<Rect>(L, 4);
			Rect srcRect = Lua::get<Rect>(L, 3);
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest, srcRect, destRect);
			return 0;
		}

		if (Lua::checkArguments<Texture, RenderTexture, Material>(L, 2)) {
			Material material = Lua::get<Material>(L, 3);
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest, material);
			return 0;
		}

		if (Lua::checkArguments<Texture, RenderTexture, Material, Rect>(L, 2)) {
			Rect rect = Lua::get<Rect>(L, 4);
			Material material = Lua::get<Material>(L, 3);
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest, material, rect);
			return 0;
		}

		if (Lua::checkArguments<Texture, RenderTexture, Material, Rect, Rect>(L, 2)) {
			Rect destRect = Lua::get<Rect>(L, 5);
			Rect srcRect = Lua::get<Rect>(L, 4);
			Material material = Lua::get<Material>(L, 3);
			RenderTexture dest = Lua::get<RenderTexture>(L, 2);
			Texture src = Lua::get<Texture>(L, 1);
			
			Graphics::Blit(src, dest, material, srcRect, destRect);
			return 0;
		}

		Debug::LogError("failed to call \"Blit\", invalid arguments.");
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Graphics>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "Graphics", GraphicsStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Graphics> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Graphics>(L, metalib, nullptr);
	}
};
