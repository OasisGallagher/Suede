// Warning: this file is generated by wrapper.py.

#pragma once

#include "../luax.h"
#include "resources.h"

class Resources_Wrapper {
	static int ResourcesInstance(lua_State* L) {
		return Lua::reference<Resources>(L);
	}

	static int Import(lua_State* L) {
		Resources* _p = Resources::instance();
		_p->Import();
		return 0;
	}

	static int GetBlackTexture(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetBlackTexture());
	}

	static int GetWhiteTexture(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetWhiteTexture());
	}

	static int GetRootDirectory(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetRootDirectory());
	}

	static int GetModelDirectory(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetModelDirectory());
	}

	static int GetShaderDirectory(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetShaderDirectory());
	}

	static int GetTextureDirectory(lua_State* L) {
		Resources* _p = Resources::instance();
		return Lua::push(L, _p->GetTextureDirectory());
	}

	static int GetPrimitive(lua_State* L) {
		Resources* _p = Resources::instance();
		PrimitiveType type = Lua::get<PrimitiveType>(L, -1);
		return Lua::push(L, _p->GetPrimitive(type));
	}

	static int CreatePrimitive(lua_State* L) {
		Resources* _p = Resources::instance();
		PrimitiveType type = Lua::get<PrimitiveType>(L, -1);
		float scale = Lua::get<float>(L, -2);
		return Lua::push(L, _p->CreatePrimitive(type, scale));
	}

	static int CreateInstancedPrimitive(lua_State* L) {
		Resources* _p = Resources::instance();
		PrimitiveType type = Lua::get<PrimitiveType>(L, -1);
		float scale = Lua::get<float>(L, -2);
		InstanceAttribute color = Lua::get<InstanceAttribute>(L, -3);
		InstanceAttribute geometry = Lua::get<InstanceAttribute>(L, -4);
		return Lua::push(L, _p->CreateInstancedPrimitive(type, scale, color, geometry));
	}

	static int GetPrimitiveAttribute(lua_State* L) {
		Resources* _p = Resources::instance();
		MeshAttribute attribute = Lua::get<MeshAttribute>(L, -1);
		PrimitiveType type = Lua::get<PrimitiveType>(L, -2);
		float scale = Lua::get<float>(L, -3);
		_p->GetPrimitiveAttribute(attribute, type, scale);
		return 0;
	}

	static int FindShader(lua_State* L) {
		Resources* _p = Resources::instance();
		std::string path = Lua::get<std::string>(L, -1);
		return Lua::push(L, _p->FindShader(path));
	}

	static int FindTexture(lua_State* L) {
		Resources* _p = Resources::instance();
		std::string path = Lua::get<std::string>(L, -1);
		return Lua::push(L, _p->FindTexture(path));
	}

	static int FindMaterial(lua_State* L) {
		Resources* _p = Resources::instance();
		std::string name = Lua::get<std::string>(L, -1);
		return Lua::push(L, _p->FindMaterial(name));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Resources>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "ResourcesInstance", ResourcesInstance });

		luaL_Reg metalib[] = {
			{ "Import", Import },
			{ "GetBlackTexture", GetBlackTexture },
			{ "GetWhiteTexture", GetWhiteTexture },
			{ "GetRootDirectory", GetRootDirectory },
			{ "GetModelDirectory", GetModelDirectory },
			{ "GetShaderDirectory", GetShaderDirectory },
			{ "GetTextureDirectory", GetTextureDirectory },
			{ "GetPrimitive", GetPrimitive },
			{ "CreatePrimitive", CreatePrimitive },
			{ "CreateInstancedPrimitive", CreateInstancedPrimitive },
			{ "GetPrimitiveAttribute", GetPrimitiveAttribute },
			{ "FindShader", FindShader },
			{ "FindTexture", FindTexture },
			{ "FindMaterial", FindMaterial },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Resources>(L, metalib, nullptr);
	}
};
