// Warning: this file is generated by wrapper.py.

#pragma once

#include "resources.h"

#include "lua++.h"
#include "tools/string.h"

class Resources_Wrapper {
	static int ToString(lua_State* L) {
		Resources* _p = Lua::callerPtr<Resources>(L);

		lua_pushstring(L, String::Format("Resources@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static Resources");
		return 1;
	}

	static int ResourcesStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "Import", Import },
			{ "GetBlackTexture", GetBlackTexture },
			{ "GetWhiteTexture", GetWhiteTexture },
			{ "GetRootDirectory", GetRootDirectory },
			{ "GetModelDirectory", GetModelDirectory },
			{ "GetShaderDirectory", GetShaderDirectory },
			{ "GetTextureDirectory", GetTextureDirectory },
			{ "GetPrimitive", GetPrimitive },
			{ "CreatePrimitive", CreatePrimitive },
			{ "CreateInstancedPrimitive", CreateInstancedPrimitive },
			{ "GetPrimitiveAttribute", GetPrimitiveAttribute },
			{ "FindShader", FindShader },
			{ "FindTexture", FindTexture },
			{ "FindMaterial", FindMaterial },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static void Import()
	static int Import(lua_State* L) {
		Resources::Import();
		return 0;
	}

	// static Texture2D GetBlackTexture()
	static int GetBlackTexture(lua_State* L) {
		return Lua::push(L, Resources::GetBlackTexture());
	}

	// static Texture2D GetWhiteTexture()
	static int GetWhiteTexture(lua_State* L) {
		return Lua::push(L, Resources::GetWhiteTexture());
	}

	// static std::string GetRootDirectory()
	static int GetRootDirectory(lua_State* L) {
		return Lua::push(L, Resources::GetRootDirectory());
	}

	// static std::string GetModelDirectory()
	static int GetModelDirectory(lua_State* L) {
		return Lua::push(L, Resources::GetModelDirectory());
	}

	// static std::string GetShaderDirectory()
	static int GetShaderDirectory(lua_State* L) {
		return Lua::push(L, Resources::GetShaderDirectory());
	}

	// static std::string GetTextureDirectory()
	static int GetTextureDirectory(lua_State* L) {
		return Lua::push(L, Resources::GetTextureDirectory());
	}

	// static Mesh GetPrimitive(PrimitiveType type)
	static int GetPrimitive(lua_State* L) {
		PrimitiveType type = Lua::get<PrimitiveType>(L, 1);
		
		return Lua::push(L, Resources::GetPrimitive(type));
	}

	// static Mesh CreatePrimitive(PrimitiveType type, float scale)
	static int CreatePrimitive(lua_State* L) {
		float scale = Lua::get<float>(L, 2);
		PrimitiveType type = Lua::get<PrimitiveType>(L, 1);
		
		return Lua::push(L, Resources::CreatePrimitive(type, scale));
	}

	// static Mesh CreateInstancedPrimitive(PrimitiveType type, float scale, const InstanceAttribute& color, const InstanceAttribute& geometry)
	static int CreateInstancedPrimitive(lua_State* L) {
		InstanceAttribute geometry = Lua::get<InstanceAttribute>(L, 4);
		InstanceAttribute color = Lua::get<InstanceAttribute>(L, 3);
		float scale = Lua::get<float>(L, 2);
		PrimitiveType type = Lua::get<PrimitiveType>(L, 1);
		
		return Lua::push(L, Resources::CreateInstancedPrimitive(type, scale, color, geometry));
	}

	// static void GetPrimitiveAttribute(MeshAttribute& attribute, PrimitiveType type, float scale)
	static int GetPrimitiveAttribute(lua_State* L) {
		float scale = Lua::get<float>(L, 3);
		PrimitiveType type = Lua::get<PrimitiveType>(L, 2);
		MeshAttribute attribute = Lua::get<MeshAttribute>(L, 1);
		
		Resources::GetPrimitiveAttribute(attribute, type, scale);
		return 0;
	}

	// static Shader FindShader(const std::string& path)
	static int FindShader(lua_State* L) {
		std::string path = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, Resources::FindShader(path));
	}

	// static Texture FindTexture(const std::string& path)
	static int FindTexture(lua_State* L) {
		std::string path = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, Resources::FindTexture(path));
	}

	// static Material FindMaterial(const std::string& name)
	static int FindMaterial(lua_State* L) {
		std::string name = Lua::get<std::string>(L, 1);
		
		return Lua::push(L, Resources::FindMaterial(name));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Resources>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "Resources", ResourcesStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Resources> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Resources>(L, metalib, nullptr);
	}
};
