// Warning: this file is generated by wrapper.py.

#pragma once

#include "plane.h"

#include "lua++.h"
#include "tools/string.h"

class Plane_Wrapper {
	static int NewPlane(lua_State* L) {
		if (Lua::checkArguments(L, 1)) {
			return Lua::newObject<Plane>(L);
		}

		if (Lua::checkArguments<glm::vec4>(L, 1)) {
			glm::vec4 abcd = Lua::get<glm::vec4>(L, 1);
		
			return Lua::newObject<Plane>(L, abcd);
		}

		if (Lua::checkArguments<std::vector<glm::vec3>>(L, 1)) {
			std::vector<glm::vec3> points = Lua::getList<glm::vec3>(L, 1);
		
			return Lua::newObject<Plane>(L, points.data());
		}

		if (Lua::checkArguments<glm::vec3, float>(L, 1)) {
			float d = Lua::get<float>(L, 2);
			glm::vec3 normal = Lua::get<glm::vec3>(L, 1);
		
			return Lua::newObject<Plane>(L, normal, d);
		}

		Debug::LogError("failed to call \"Plane\", invalid arguments.");
		return 0;
	}

	static int ToString(lua_State* L) {
		Plane* _p = Lua::callerPtr<Plane>(L);

		lua_pushstring(L, String::Format("Plane@0x%p", _p).c_str());
		return 1;
	}

	// void Normalize()
	static int Normalize(lua_State* L) {
		Plane* _p = Lua::callerPtr<Plane>(L);
		_p->Normalize();
		return 0;
	}

	// float GetDistance()
	static int GetDistance(lua_State* L) {
		Plane* _p = Lua::callerPtr<Plane>(L);
		return Lua::push(L, _p->GetDistance());
	}

	// glm::vec3 GetNormal()
	static int GetNormal(lua_State* L) {
		Plane* _p = Lua::callerPtr<Plane>(L);
		return Lua::push(L, _p->GetNormal());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Plane>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewPlane", NewPlane });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Plane> },
			{ "__tostring", ToString }, 
			{ "Normalize", Normalize },
			{ "GetDistance", GetDistance },
			{ "GetNormal", GetNormal },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Plane>(L, metalib, nullptr);
	}
};
