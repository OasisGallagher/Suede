// Warning: this file is generated by wrapper.py.

#pragma once

#include "lua++.h"
#include "gizmos.h"

class Gizmos_Wrapper {
	static int GizmosInstance(lua_State* L) {
		return Lua::reference<Gizmos>(L);
	}

	static int Flush(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		_p->Flush();
		return 0;
	}

	static int GetColor(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		return Lua::push(L, _p->GetColor());
	}

	static int SetColor(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		Color value = Lua::get<Color>(L, 2);
		_p->SetColor(value);
		return 0;
	}

	static int DrawSphere(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		float radius = Lua::get<float>(L, 3);
		glm::vec3 center = Lua::get<glm::vec3>(L, 2);
		_p->DrawSphere(center, radius);
		return 0;
	}

	static int DrawCuboid(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		glm::vec3 size = Lua::get<glm::vec3>(L, 3);
		glm::vec3 center = Lua::get<glm::vec3>(L, 2);
		_p->DrawCuboid(center, size);
		return 0;
	}

	static int DrawWireSphere(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		float radius = Lua::get<float>(L, 3);
		glm::vec3 center = Lua::get<glm::vec3>(L, 2);
		_p->DrawWireSphere(center, radius);
		return 0;
	}

	static int DrawWireCuboid(lua_State* L) {
		Gizmos* _p = Gizmos::instance();
		glm::vec3 size = Lua::get<glm::vec3>(L, 3);
		glm::vec3 center = Lua::get<glm::vec3>(L, 2);
		_p->DrawWireCuboid(center, size);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Gizmos>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "GizmosInstance", GizmosInstance });

		luaL_Reg metalib[] = {
			{ "Flush", Flush },
			{ "GetColor", GetColor },
			{ "SetColor", SetColor },
			{ "DrawSphere", DrawSphere },
			{ "DrawCuboid", DrawCuboid },
			{ "DrawWireSphere", DrawWireSphere },
			{ "DrawWireCuboid", DrawWireCuboid },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Gizmos>(L, metalib, nullptr);
	}
};
