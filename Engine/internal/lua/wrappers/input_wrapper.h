// Warning: this file is generated by wrapper.py.

#pragma once

#include "input.h"

#include "lua++.h"
#include "tools/string.h"

class Input_Wrapper {
	static int InputInstance(lua_State* L) {
		return Lua::reference<Input>(L);
	}

	static int ToString(lua_State* L) {
		Input* _p = Input::instance();

		lua_pushstring(L, String::Format("Input@0x%p", _p).c_str());
		return 1;
	}

	// bool GetKey(KeyCode key)
	static int GetKey(lua_State* L) {
		Input* _p = Input::instance();
		KeyCode key = Lua::get<KeyCode>(L, 2);
		
		return Lua::push(L, _p->GetKey(key));
	}

	// bool GetKeyUp(KeyCode key)
	static int GetKeyUp(lua_State* L) {
		Input* _p = Input::instance();
		KeyCode key = Lua::get<KeyCode>(L, 2);
		
		return Lua::push(L, _p->GetKeyUp(key));
	}

	// bool GetKeyDown(KeyCode key)
	static int GetKeyDown(lua_State* L) {
		Input* _p = Input::instance();
		KeyCode key = Lua::get<KeyCode>(L, 2);
		
		return Lua::push(L, _p->GetKeyDown(key));
	}

	// bool GetMouseButton(int button)
	static int GetMouseButton(lua_State* L) {
		Input* _p = Input::instance();
		int button = Lua::get<int>(L, 2);
		
		return Lua::push(L, _p->GetMouseButton(button));
	}

	// bool GetMouseButtonUp(int button)
	static int GetMouseButtonUp(lua_State* L) {
		Input* _p = Input::instance();
		int button = Lua::get<int>(L, 2);
		
		return Lua::push(L, _p->GetMouseButtonUp(button));
	}

	// bool GetMouseButtonDown(int button)
	static int GetMouseButtonDown(lua_State* L) {
		Input* _p = Input::instance();
		int button = Lua::get<int>(L, 2);
		
		return Lua::push(L, _p->GetMouseButtonDown(button));
	}

	// int GetMouseWheelDelta()
	static int GetMouseWheelDelta(lua_State* L) {
		Input* _p = Input::instance();
		return Lua::push(L, _p->GetMouseWheelDelta());
	}

	// glm::ivec2 GetMousePosition()
	static int GetMousePosition(lua_State* L) {
		Input* _p = Input::instance();
		return Lua::push(L, _p->GetMousePosition());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Input>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "InputInstance", InputInstance });

		luaL_Reg metalib[] = {
			{ "GetKey", GetKey },
			{ "GetKeyUp", GetKeyUp },
			{ "GetKeyDown", GetKeyDown },
			{ "GetMouseButton", GetMouseButton },
			{ "GetMouseButtonUp", GetMouseButtonUp },
			{ "GetMouseButtonDown", GetMouseButtonDown },
			{ "GetMouseWheelDelta", GetMouseWheelDelta },
			{ "GetMousePosition", GetMousePosition },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Input>(L, metalib, nullptr);
	}
};
