// Warning: this file is generated by wrapper.py.

#pragma once

#include "texture.h"

#include "lua++.h"
#include "tools/string.h"

class Texture_Wrapper {
	static int ToString(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);

		lua_pushstring(L, String::Format("Texture@0x%p", _p.get()).c_str());
		return 1;
	}

	// void Bind(uint index)
	static int Bind(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		uint index = Lua::get<uint>(L, 2);
		
		_p->Bind(index);
		return 0;
	}

	// void Unbind()
	static int Unbind(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		_p->Unbind();
		return 0;
	}

	// uint GetNativePointer()
	static int GetNativePointer(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetNativePointer());
	}

	// void SetMinFilterMode(TextureMinFilterMode value)
	static int SetMinFilterMode(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		TextureMinFilterMode value = Lua::get<TextureMinFilterMode>(L, 2);
		
		_p->SetMinFilterMode(value);
		return 0;
	}

	// TextureMinFilterMode GetMinFilterMode()
	static int GetMinFilterMode(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetMinFilterMode());
	}

	// void SetMagFilterMode(TextureMagFilterMode value)
	static int SetMagFilterMode(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		TextureMagFilterMode value = Lua::get<TextureMagFilterMode>(L, 2);
		
		_p->SetMagFilterMode(value);
		return 0;
	}

	// TextureMagFilterMode GetMagFilterMode()
	static int GetMagFilterMode(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetMagFilterMode());
	}

	// void SetWrapModeS(TextureWrapMode value)
	static int SetWrapModeS(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		TextureWrapMode value = Lua::get<TextureWrapMode>(L, 2);
		
		_p->SetWrapModeS(value);
		return 0;
	}

	// TextureWrapMode GetWrapModeS()
	static int GetWrapModeS(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetWrapModeS());
	}

	// void SetWrapModeT(TextureWrapMode value)
	static int SetWrapModeT(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		TextureWrapMode value = Lua::get<TextureWrapMode>(L, 2);
		
		_p->SetWrapModeT(value);
		return 0;
	}

	// TextureWrapMode GetWrapModeT()
	static int GetWrapModeT(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetWrapModeT());
	}

	// uint GetWidth()
	static int GetWidth(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetWidth());
	}

	// uint GetHeight()
	static int GetHeight(lua_State* L) {
		Texture& _p = *Lua::callerIntrusivePtr<Texture>(L);
		return Lua::push(L, _p->GetHeight());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Texture>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<Texture> },
			{ "__tostring", ToString }, 
			{ "Bind", Bind },
			{ "Unbind", Unbind },
			{ "GetNativePointer", GetNativePointer },
			{ "SetMinFilterMode", SetMinFilterMode },
			{ "GetMinFilterMode", GetMinFilterMode },
			{ "SetMagFilterMode", SetMagFilterMode },
			{ "GetMagFilterMode", GetMagFilterMode },
			{ "SetWrapModeS", SetWrapModeS },
			{ "GetWrapModeS", GetWrapModeS },
			{ "SetWrapModeT", SetWrapModeT },
			{ "GetWrapModeT", GetWrapModeT },
			{ "GetWidth", GetWidth },
			{ "GetHeight", GetHeight },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Texture>(L, metalib, TypeID<Object>::string());
	}
};

class Texture2D_Wrapper {
	static int NewTexture2D(lua_State* L) {
		return Lua::fromIntrusive(L, new ITexture2D());
	}

	static int ToString(lua_State* L) {
		Texture2D& _p = *Lua::callerIntrusivePtr<Texture2D>(L);

		lua_pushstring(L, String::Format("Texture2D@0x%p", _p.get()).c_str());
		return 1;
	}

	// bool Load(const std::string& path)
	static int Load(lua_State* L) {
		Texture2D& _p = *Lua::callerIntrusivePtr<Texture2D>(L);
		std::string path = Lua::get<std::string>(L, 2);
		
		return Lua::push(L, _p->Load(path));
	}

	// TextureFormat GetFormat()
	static int GetFormat(lua_State* L) {
		Texture2D& _p = *Lua::callerIntrusivePtr<Texture2D>(L);
		return Lua::push(L, _p->GetFormat());
	}

	// bool EncodeToPNG(std::vector<uchar>& data)
	static int EncodeToPNG(lua_State* L) {
		Texture2D& _p = *Lua::callerIntrusivePtr<Texture2D>(L);
		std::vector<uchar> data = Lua::getList<uchar>(L, 2);
		
		return Lua::push(L, _p->EncodeToPNG(data));
	}

	// bool EncodeToJPG(std::vector<uchar>& data)
	static int EncodeToJPG(lua_State* L) {
		Texture2D& _p = *Lua::callerIntrusivePtr<Texture2D>(L);
		std::vector<uchar> data = Lua::getList<uchar>(L, 2);
		
		return Lua::push(L, _p->EncodeToJPG(data));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Texture2D>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewTexture2D", NewTexture2D });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<Texture2D> },
			{ "__tostring", ToString }, 
			{ "Load", Load },
			{ "GetFormat", GetFormat },
			{ "EncodeToPNG", EncodeToPNG },
			{ "EncodeToJPG", EncodeToJPG },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Texture2D>(L, metalib, TypeID<Texture>::string());
	}
};

class TextureCube_Wrapper {
	static int NewTextureCube(lua_State* L) {
		return Lua::fromIntrusive(L, new ITextureCube());
	}

	static int ToString(lua_State* L) {
		TextureCube& _p = *Lua::callerIntrusivePtr<TextureCube>(L);

		lua_pushstring(L, String::Format("TextureCube@0x%p", _p.get()).c_str());
		return 1;
	}

	// bool Load(const std::string textures[6])
	static int Load(lua_State* L) {
		TextureCube& _p = *Lua::callerIntrusivePtr<TextureCube>(L);
		std::vector<std::string> textures = Lua::getList<std::string>(L, 2);
		
		return Lua::push(L, _p->Load(textures.data()));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<TextureCube>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewTextureCube", NewTextureCube });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<TextureCube> },
			{ "__tostring", ToString }, 
			{ "Load", Load },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<TextureCube>(L, metalib, TypeID<Texture>::string());
	}
};

class TextureBuffer_Wrapper {
	static int NewTextureBuffer(lua_State* L) {
		return Lua::fromIntrusive(L, new ITextureBuffer());
	}

	static int ToString(lua_State* L) {
		TextureBuffer& _p = *Lua::callerIntrusivePtr<TextureBuffer>(L);

		lua_pushstring(L, String::Format("TextureBuffer@0x%p", _p.get()).c_str());
		return 1;
	}

	// uint GetSize()
	static int GetSize(lua_State* L) {
		TextureBuffer& _p = *Lua::callerIntrusivePtr<TextureBuffer>(L);
		return Lua::push(L, _p->GetSize());
	}

	// bool Create(uint size)
	static int Create(lua_State* L) {
		TextureBuffer& _p = *Lua::callerIntrusivePtr<TextureBuffer>(L);
		uint size = Lua::get<uint>(L, 2);
		
		return Lua::push(L, _p->Create(size));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<TextureBuffer>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewTextureBuffer", NewTextureBuffer });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<TextureBuffer> },
			{ "__tostring", ToString }, 
			{ "GetSize", GetSize },
			{ "Create", Create },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<TextureBuffer>(L, metalib, TypeID<Texture>::string());
	}
};

class RenderTexture_Wrapper {
	static int NewRenderTexture(lua_State* L) {
		return Lua::fromIntrusive(L, new IRenderTexture());
	}

	static int ToString(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);

		lua_pushstring(L, String::Format("RenderTexture@0x%p", _p.get()).c_str());
		return 1;
	}

	// bool Create(RenderTextureFormat format, uint width, uint height)
	static int Create(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);
		uint height = Lua::get<uint>(L, 4);
		uint width = Lua::get<uint>(L, 3);
		RenderTextureFormat format = Lua::get<RenderTextureFormat>(L, 2);
		
		return Lua::push(L, _p->Create(format, width, height));
	}

	// Texture2D ToTexture2D()
	static int ToTexture2D(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);
		return Lua::push(L, _p->ToTexture2D());
	}

	// void Resize(uint width, uint height)
	static int Resize(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);
		uint height = Lua::get<uint>(L, 3);
		uint width = Lua::get<uint>(L, 2);
		
		_p->Resize(width, height);
		return 0;
	}

	// void Clear(const Rect& normalizedRect, float depth)
	// void Clear(const Rect& normalizedRect, const Color& color, float depth)
	// void Clear(const Rect& normalizedRect, const Color& color, float depth, int stencil)
	static int Clear(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);
		if (Lua::checkArguments<Rect, float>(L, 2)) {
			float depth = Lua::get<float>(L, 3);
			Rect normalizedRect = Lua::get<Rect>(L, 2);
			
			_p->Clear(normalizedRect, depth);
			return 0;
		}

		if (Lua::checkArguments<Rect, Color, float>(L, 2)) {
			float depth = Lua::get<float>(L, 4);
			Color color = Lua::get<Color>(L, 3);
			Rect normalizedRect = Lua::get<Rect>(L, 2);
			
			_p->Clear(normalizedRect, color, depth);
			return 0;
		}

		if (Lua::checkArguments<Rect, Color, float, int>(L, 2)) {
			int stencil = Lua::get<int>(L, 5);
			float depth = Lua::get<float>(L, 4);
			Color color = Lua::get<Color>(L, 3);
			Rect normalizedRect = Lua::get<Rect>(L, 2);
			
			_p->Clear(normalizedRect, color, depth, stencil);
			return 0;
		}

		Debug::LogError("failed to call \"Clear\", invalid arguments.");
		return 0;
	}

	// void BindWrite(const Rect& normalizedRect)
	static int BindWrite(lua_State* L) {
		RenderTexture& _p = *Lua::callerIntrusivePtr<RenderTexture>(L);
		Rect normalizedRect = Lua::get<Rect>(L, 2);
		
		_p->BindWrite(normalizedRect);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<RenderTexture>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewRenderTexture", NewRenderTexture });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<RenderTexture> },
			{ "__tostring", ToString }, 
			{ "Create", Create },
			{ "ToTexture2D", ToTexture2D },
			{ "Resize", Resize },
			{ "Clear", Clear },
			{ "BindWrite", BindWrite },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<RenderTexture>(L, metalib, TypeID<Texture>::string());
	}
};

class RenderTextureUtility_Wrapper {
	static int ToString(lua_State* L) {
		RenderTextureUtility* _p = Lua::callerPtr<RenderTextureUtility>(L);

		lua_pushstring(L, String::Format("RenderTextureUtility@0x%p", _p).c_str());
		return 1;
	}

	static int ToStringStatic(lua_State* L) {
		lua_pushstring(L, "static RenderTextureUtility");
		return 1;
	}

	static int RenderTextureUtilityStatic(lua_State* L) {
		lua_newtable(L);

		luaL_Reg funcs[] = {
			{ "GetDefault", GetDefault },
			{ "GetTemporary", GetTemporary },
			{ "ReleaseTemporary", ReleaseTemporary },
			{"__tostring", ToStringStatic },
			{ nullptr, nullptr }
		};

		luaL_setfuncs(L, funcs, 0);

		return 1;
	}
	// static RenderTexture GetDefault()
	static int GetDefault(lua_State* L) {
		return Lua::push(L, RenderTextureUtility::GetDefault());
	}

	// static RenderTexture GetTemporary(RenderTextureFormat format, uint width, uint height)
	static int GetTemporary(lua_State* L) {
		uint height = Lua::get<uint>(L, 3);
		uint width = Lua::get<uint>(L, 2);
		RenderTextureFormat format = Lua::get<RenderTextureFormat>(L, 1);
		
		return Lua::push(L, RenderTextureUtility::GetTemporary(format, width, height));
	}

	// static void ReleaseTemporary(RenderTexture texture)
	static int ReleaseTemporary(lua_State* L) {
		RenderTexture texture = Lua::get<RenderTexture>(L, 1);
		
		RenderTextureUtility::ReleaseTemporary(texture);
		return 0;
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<RenderTextureUtility>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		fields.push_back(luaL_Reg{ "RenderTextureUtility", RenderTextureUtilityStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<RenderTextureUtility> },
			{ "__tostring", ToString }, 
			{ nullptr, nullptr }
		};

		Lua::initMetatable<RenderTextureUtility>(L, metalib, nullptr);
	}
};

class MRTRenderTexture_Wrapper {
	static int NewMRTRenderTexture(lua_State* L) {
		return Lua::fromIntrusive(L, new IMRTRenderTexture());
	}

	static int ToString(lua_State* L) {
		MRTRenderTexture& _p = *Lua::callerIntrusivePtr<MRTRenderTexture>(L);

		lua_pushstring(L, String::Format("MRTRenderTexture@0x%p", _p.get()).c_str());
		return 1;
	}

	// bool AddColorTexture(TextureFormat format)
	static int AddColorTexture(lua_State* L) {
		MRTRenderTexture& _p = *Lua::callerIntrusivePtr<MRTRenderTexture>(L);
		TextureFormat format = Lua::get<TextureFormat>(L, 2);
		
		return Lua::push(L, _p->AddColorTexture(format));
	}

	// Texture2D GetColorTexture(uint index)
	static int GetColorTexture(lua_State* L) {
		MRTRenderTexture& _p = *Lua::callerIntrusivePtr<MRTRenderTexture>(L);
		uint index = Lua::get<uint>(L, 2);
		
		return Lua::push(L, _p->GetColorTexture(index));
	}

	// uint GetColorTextureCount()
	static int GetColorTextureCount(lua_State* L) {
		MRTRenderTexture& _p = *Lua::callerIntrusivePtr<MRTRenderTexture>(L);
		return Lua::push(L, _p->GetColorTextureCount());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<MRTRenderTexture>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewMRTRenderTexture", NewMRTRenderTexture });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteIntrusivePtr<MRTRenderTexture> },
			{ "__tostring", ToString }, 
			{ "AddColorTexture", AddColorTexture },
			{ "GetColorTexture", GetColorTexture },
			{ "GetColorTextureCount", GetColorTextureCount },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<MRTRenderTexture>(L, metalib, TypeID<RenderTexture>::string());
	}
};
