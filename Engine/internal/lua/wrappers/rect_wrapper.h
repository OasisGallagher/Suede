// Warning: this file is generated by wrapper.py.

#pragma once

#include "rect.h"

#include "lua++.h"
#include "tools/string.h"

class Rect_Wrapper {
	static int NewRect(lua_State* L) {
		return Lua::newObject<Rect>(L);
	}

	static int ToString(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		lua_pushstring(L, String::Format("Rect@0x%p", _p).c_str());
		return 1;
	}

	static int RectStatic(lua_State* L) {
		lua_newtable(L);
		luaL_newmetatable(L, "RectStatic");

		luaL_Reg funcs[] = {
			{ "NormalizedToRect", NormalizedToRect },
			{"__tostring", ToString },
			{ nullptr, nullptr }
		};
		
		luaL_setfuncs(L, funcs, 0);

		// duplicate metatable.
		lua_pushvalue(L, -1);
		lua_setfield(L, -2, "__index");

		lua_setmetatable(L, -2);

		return 1;
	}
		// glm::vec2 GetLeftTop()
	static int GetLeftTop(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetLeftTop());
	}

	// glm::vec2 GetLeftBottom()
	static int GetLeftBottom(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetLeftBottom());
	}

	// glm::vec2 GetRightTop()
	static int GetRightTop(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetRightTop());
	}

	// glm::vec2 GetRightBottom()
	static int GetRightBottom(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetRightBottom());
	}

	// void SetWidth(float value)
	static int SetWidth(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 1);
		float value = Lua::get<float>(L, 2);
		_p->SetWidth(value);
		return 0;
	}

	// float GetWidth()
	static int GetWidth(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetWidth());
	}

	// void SetHeight(float value)
	static int SetHeight(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 1);
		float value = Lua::get<float>(L, 2);
		_p->SetHeight(value);
		return 0;
	}

	// float GetHeight()
	static int GetHeight(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetHeight());
	}

	// void SetXMin(float value)
	static int SetXMin(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 1);
		float value = Lua::get<float>(L, 2);
		_p->SetXMin(value);
		return 0;
	}

	// float GetXMin()
	static int GetXMin(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetXMin());
	}

	// void SetYMin(float value)
	static int SetYMin(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 1);
		float value = Lua::get<float>(L, 2);
		_p->SetYMin(value);
		return 0;
	}

	// float GetYMin()
	static int GetYMin(lua_State* L) {
		Rect* _p = Lua::callerPtr<Rect>(L, 0);
		return Lua::push(L, _p->GetYMin());
	}

	// static Rect NormalizedToRect(const Rect& rect, const Rect& normalized)
	static int NormalizedToRect(lua_State* L) {
		Rect normalized = Lua::get<Rect>(L, 3);
		Rect rect = Lua::get<Rect>(L, 2);
		return Lua::push(L, Rect::NormalizedToRect(rect, normalized));
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Rect>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		funcs.push_back(luaL_Reg { "NewRect", NewRect });

		fields.push_back(luaL_Reg{ "Rect", RectStatic });

		luaL_Reg metalib[] = {
			{ "__gc", Lua::deletePtr<Rect> },
			{ "__tostring", ToString }, 
			{ "GetLeftTop", GetLeftTop },
			{ "GetLeftBottom", GetLeftBottom },
			{ "GetRightTop", GetRightTop },
			{ "GetRightBottom", GetRightBottom },
			{ "SetWidth", SetWidth },
			{ "GetWidth", GetWidth },
			{ "SetHeight", SetHeight },
			{ "GetHeight", GetHeight },
			{ "SetXMin", SetXMin },
			{ "GetXMin", GetXMin },
			{ "SetYMin", SetYMin },
			{ "GetYMin", GetYMin },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Rect>(L, metalib, nullptr);
	}
};
