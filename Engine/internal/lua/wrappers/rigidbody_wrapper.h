// Warning: this file is generated by wrapper.py.

#pragma once

#include "rigidbody.h"

#include "lua++.h"
#include "tools/string.h"

class Rigidbody_Wrapper {
	static int ToString(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);

		lua_pushstring(L, String::Format("Rigidbody@0x%p", _p.get()).c_str());
		return 1;
	}

	// void ShowCollisionShape(bool value)
	static int ShowCollisionShape(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);
		bool value = Lua::get<bool>(L, 2);
		
		_p->ShowCollisionShape(value);
		return 0;
	}

	// void SetMass(float value)
	static int SetMass(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);
		float value = Lua::get<float>(L, 2);
		
		_p->SetMass(value);
		return 0;
	}

	// float GetMass()
	static int GetMass(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);
		return Lua::push(L, _p->GetMass());
	}

	// void SetVelocity(const glm::vec3& value)
	static int SetVelocity(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);
		glm::vec3 value = Lua::get<glm::vec3>(L, 2);
		
		_p->SetVelocity(value);
		return 0;
	}

	// glm::vec3 GetVelocity()
	static int GetVelocity(lua_State* L) {
		Rigidbody& _p = *Lua::callerSharedPtr<Rigidbody>(L);
		return Lua::push(L, _p->GetVelocity());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Rigidbody>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& funcs, std::vector<luaL_Reg>& fields) {
		luaL_Reg metalib[] = {
			{ "__gc", Lua::deleteSharedPtr<Rigidbody> },
			{ "__tostring", ToString }, 
			{ "ShowCollisionShape", ShowCollisionShape },
			{ "SetMass", SetMass },
			{ "GetMass", GetMass },
			{ "SetVelocity", SetVelocity },
			{ "GetVelocity", GetVelocity },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Rigidbody>(L, metalib, TypeID<Component>::string());
	}
};
