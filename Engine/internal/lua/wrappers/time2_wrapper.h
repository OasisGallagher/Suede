// Warning: this file is generated by wrapper.py.

#pragma once

#include "lua++.h"
#include "time2.h"

class Time_Wrapper {
	static int TimeInstance(lua_State* L) {
		return Lua::reference<Time>(L);
	}

	static int GetTime(lua_State* L) {
		Time* _p = Time::instance();
		return Lua::push(L, _p->GetTime());
	}

	static int GetDeltaTime(lua_State* L) {
		Time* _p = Time::instance();
		return Lua::push(L, _p->GetDeltaTime());
	}

	static int GetRealTimeSinceStartup(lua_State* L) {
		Time* _p = Time::instance();
		return Lua::push(L, _p->GetRealTimeSinceStartup());
	}

	static int GetFrameCount(lua_State* L) {
		Time* _p = Time::instance();
		return Lua::push(L, _p->GetFrameCount());
	}

public:
	static void create(lua_State* L) {
		Lua::createMetatable<Time>(L);
	}
	
	static void initialize(lua_State* L, std::vector<luaL_Reg>& regs) {
		regs.push_back(luaL_Reg { "TimeInstance", TimeInstance });

		luaL_Reg metalib[] = {
			{ "GetTime", GetTime },
			{ "GetDeltaTime", GetDeltaTime },
			{ "GetRealTimeSinceStartup", GetRealTimeSinceStartup },
			{ "GetFrameCount", GetFrameCount },
			{ nullptr, nullptr }
		};

		Lua::initMetatable<Time>(L, metalib, nullptr);
	}
};
