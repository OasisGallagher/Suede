#pragma once

const char* const grammar = 
"Program\n"
"	: TopStatements		$$ = $1\n"
"\n"
"TopStatements\n"
"	: epsilon				$$ = $0\n"
"	| TopStatementsPrefix	$$ = $1\n"
"\n"
"TopStatementsPrefix\n"
"	: TopStatement						$$ = $1\n"
"	| TopStatementsPrefix TopStatement	$$ = make(\"statememts\", $2, $1)\n"
"\n"
"TopStatement\n"
"	: Statement				$$ = $1\n"
"	| FunctionDefinition	$$ = $1\n"
"\n"
"Statement\n"
"	: EmptyStatement				$$ = $1\n"
"	| ExpressionStatement ;			$$ = $2\n"
"	| UniformDefination ;			$$ = $2\n"
"	| VariableDefination ;			$$ = $2\n"
"	| Block							$$ = $1\n"
"	| IfStatement					$$ = $1\n"
"	| WhileStatement				$$ = $1\n"
"	| ForStatement					$$ = $1\n"
"	| ContinueStatement ;			$$ = $2\n"
"	| BreakStatement ;				$$ = $2\n"
"	| ReturnStatement ;				$$ = $2\n"
"\n"
"EmptyStatement\n"
"	: ;						$$ = $1\n"
"\n"
"ExpressionStatement\n"
"	: Expression			$$ = $1\n"
"\n"
"TypeSpecifier\n"
"	: int			$$ = $1\n"
"	| bool			$$ = $1\n"
"	| float			$$ = $1\n"
"	| mat4			$$ = $1\n"
"	| mat3			$$ = $1\n"
"	| vec3			$$ = $1\n"
"	| vec4			$$ = $1\n"
"	| sampler2D		$$ = $1\n"
"\n"
"UniformDefination\n"
"	: uniform VariableDefination	$$ = make(\"uniform-def\", $1)\n" 
"\n"
"VariableDefination\n"
"	: TypeSpecifier VariableDeclarationList	$$ = make(\"var-def\", $1)\n"
"\n"
"VariableDeclarationList\n"
"	: VariableDeclaration							$$ = $1\n"
"	| VariableDeclarationList, VariableDefination	$$ = make(\"var-decl-list\", $2, $1)\n"
"\n"
"VariableDeclaration\n"
"	: Identifier VariableInitializer				$$ = make(\"var-decl\", $2, $1)\n"
"\n"
"VariableInitializer\n"
"	: epsilon					$$ = $0\n"
"	| = AssignmentExpression	$$ = make(\"var-initializer\", $1)\n"
"\n"
"Block\n"
"	: { BlockStatements }		$$ = $2\n"
"\n"
"BlockStatements\n"
"	: epsilon					$$ = $0\n"
"	| BlockStatementsPrefix		$$ = $1\n"
"\n"
"BlockStatementsPrefix\n"
"	: Statement							$$ = $1\n"
"	| BlockStatementsPrefix Statement	$$ = make(\"block-statements\", $2, $1)\n"
"\n"
"IfStatement\n"
"	: if ParenthesizedExpression Statement					$$ = make(\"if\", $2, $1, $0)\n"
"	| if ParenthesizedExpression Statement else Statement	$$ = make(\"if\", $4, $3, $1)\n"
"\n"
"WhileStatement\n"
"	: while ParenthesizedExpression Statement	$$ = make(\"while\", $2, $1)\n"
"\n"
"ForStatement\n"
"	: for ( ForInitializer ; OptionalExpession ; OptionalExpession ) Statement	$$ = make(\"for\", $7, $5, $3, $1)\n"
"\n"
"ForInitializer\n"
"	: epsilon						$$ = $0\n"
"	| Expression					$$ = $1\n"
"	| TypeSpecifier VariableDeclarationList	$$ = make(\"for-initializer\", $1)\n"
"\n"
"ContinueStatement\n"
"	: continue	$$ = make(\"continue\")\n"
"\n"
"BreakStatement\n"
"	: break		$$ = make(\"break\")\n"
"\n"
"ReturnStatement\n"
"	: return OptionalExpession	$$ = make(\"return\", $1)\n"
"\n"
"FunctionDefinition\n"
"	: NamedFunction			$$ = $1\n"
"\n"
"AnonymousFunction\n"
"	: function FormalParametersAndBody	$$ = make(\"anonymous-function\", $1)\n"
"\n"
"NamedFunction\n"
"	: TypeSpecifier Identifier FormalParametersAndBody	$$ = make(\"named-function\", $2, $1)\n"
"\n"
"FormalParametersAndBody\n"
"	: ( FormalParameters ) { TopStatements }		$$ = make(\"function-parameters-and-body\", $5, $2)\n"
"\n"
"FormalParameters\n"
"	: epsilon					$$ = $0\n"
"	| FormalParametersPrefix	$$ = $1\n"
"\n"
"FormalParametersPrefix\n"
"	: FormalParameter								$$ = $1\n"
"	| FormalParametersPrefix , FormalParameter		$$ = make(\"formal-parameters-prefix\", $3, $1)\n"
"\n"
"FormalParameter\n"
"	: Identifier	$$ = $1\n"
"\n"
"Expression\n"
"	: AssignmentExpression					$$ = $1\n"
"	| Expression , AssignmentExpression		$$ = make(\"expression\", $3, $1)\n"
"\n"
"OptionalExpession\n"
"	: epsilon		$$ = $0\n"
"	| Expression	$$ = $1\n"
"\n"
"CastExpression\n"
"	: TypeSpecifier()"
""
"AssignmentExpression\n"
"	: ConditionalExpression											$$ = $1\n"
"	| LeftSideExpression = AssignmentExpression						$$ = make(\"=\", $3, $1)\n"
"	| LeftSideExpression CompoundAssignment AssignmentExpression	$$ = make(\"compound-assignment-expression\", $3, $2, $1)\n"
"\n"
"CompoundAssignment\n"
"	: *=	$$ = make(\"*=\")\n"
"	| /=	$$ = make(\"/=\")\n"
"	| %=	$$ = make(\"%=\")\n"
"	| +=	$$ = make(\"+=\")\n"
"	| -=	$$ = make(\"-=\")\n"
"	| <<=	$$ = make(\"<<=\")\n"
"	| >>=	$$ = make(\">>=\")\n"
"	| &=	$$ = make(\"&=\")\n"
"	| ^=	$$ = make(\"^=\")\n"
"	| |=	$$ = make(\"|=\")\n"
"\n"
"ConditionalExpression\n"
"	: LogicalOrExpression													$$ = $1\n"
"	| LogicalOrExpression ? AssignmentExpression : AssignmentExpression		$$ = make(\"?:\", $3, $1)\n"
"\n"
"LogicalAndExpression\n"
"	: BitwiseOrExpression							$$ = $1\n"
"	| LogicalAndExpression && BitwiseOrExpression	$$ = make(\"&&\", $3, $1)\n"
"\n"
"LogicalOrExpression\n"
"	: LogicalAndExpression							$$ = $1\n"
"	| LogicalOrExpression || LogicalAndExpression	$$ = make(\"||\", $3, $1)\n"
"\n"
"BitwiseAndExpression\n"
"	: EqualityExpression							$$ = $1\n"
"	| BitwiseAndExpression & EqualityExpression		$$ = make(\"&\", $3, $1)\n"
"\n"
"BitwiseXorExpression\n"
"	: BitwiseAndExpression							$$ = $1\n"
"	| BitwiseXorExpression ^ BitwiseAndExpression	$$ = make(\"^\", $3, $1)\n"
"\n"
"BitwiseOrExpression\n"
"	: BitwiseXorExpression							$$ = $1\n"
"	| BitwiseOrExpression | BitwiseXorExpression	$$ = make(\"|\", $3, $1)\n"
"\n"
"EqualityExpression\n"
"	: RelationalExpression							$$ = $1\n"
"	| EqualityExpression == RelationalExpression	$$ = make(\"==\", $3, $1)\n"
"	| EqualityExpression != RelationalExpression	$$ = make(\"!=\", $3, $1)\n"
"\n"
"RelationalExpression\n"
"	: ShiftExpression								$$ = $1\n"
"	| RelationalExpression < ShiftExpression		$$ = make(\"<\", $3, $1)\n"
"	| RelationalExpression > ShiftExpression		$$ = make(\">\", $3, $1)\n"
"	| RelationalExpression <= ShiftExpression		$$ = make(\"<=\", $3, $1)\n"
"	| RelationalExpression >= ShiftExpression		$$ = make(\">=\", $3, $1)\n"
"\n"
"ShiftExpression\n"
"	: AdditiveExpression							$$ = $1\n"
"	| ShiftExpression << AdditiveExpression			$$ = make(\"<<\", $3, $1)\n"
"	| ShiftExpression >> AdditiveExpression			$$ = make(\">>\", $3, $1)\n"
"\n"
"AdditiveExpression\n"
"	: MultiplicativeExpression						$$ = $1\n"
"	| AdditiveExpression + MultiplicativeExpression	$$ = make(\"+\", $3, $1)\n"
"	| AdditiveExpression - MultiplicativeExpression	$$ = make(\"-\", $3, $1)\n"
"\n"
"MultiplicativeExpression\n"
"	: UnaryExpression								$$ = $1\n"
"	| MultiplicativeExpression * UnaryExpression	$$ = make(\"*\", $3, $1)\n"
"	| MultiplicativeExpression / UnaryExpression	$$ = make(\"/\", $3, $1)\n"
"	| MultiplicativeExpression % UnaryExpression	$$ = make(\"%\", $3, $1)\n"
"\n"
"UnaryExpression\n"
"	: PostfixExpression					$$ = $1\n"
"	| void UnaryExpression				$$ = make(\"void\", $1)\n"
"	| ++ LeftSideExpression				$$ = make(\"++\", $1)\n"
"	| -- LeftSideExpression				$$ = make(\"--\", $1)\n"
"	| + UnaryExpression					$$ = make(\"positive\", $1)\n"
"	| - UnaryExpression					$$ = make(\"negative\", $1)\n"
"	| ~ UnaryExpression					$$ = make(\"~\", $1)\n"
"	| ! UnaryExpression					$$ = make(\"!\", $1)\n"
"\n"
"PostfixExpression\n"
"	: LeftSideExpression				$$ = $1\n"
"	| LeftSideExpression ++				$$ = make(\"v++\", $2)\n"
"	| LeftSideExpression --				$$ = make(\"v--\", $2)\n"
"\n"
"LeftSideExpression\n"
"	: CallExpression		$$ = $1\n"
"\n"
"CallExpression\n"
"	: PrimaryExpression					$$ = $1\n"
"	| CallExpression MemberOperator		$$ = make(\"callm\", $2, $1)\n"
"	| CallExpression Arguments			$$ = make(\"calla\", $2, $1)\n"
"\n"
"MemberOperator\n"
"	: [ Expression ]			$$ = make(\"[]\", $2)\n"
"	| . Identifier				$$ = make(\".\", $1)\n"
"\n"
"Arguments\n"
"	: ( )						$$ = make(\"arguments\", $0)\n"
"	| ( ArgumentList )			$$ = make(\"arguments\", $2)\n"
"\n"
"ArgumentList\n"
"	: AssignmentExpression					$$ = $1\n"
"	| ArgumentList , AssignmentExpression	$$ = make(\"argument-list\", $3, $1)\n"
"\n"
"ArrayLiteral\n"
"	: [ ]									$$ = make(\"()\", $0)\n"
"	| [ ElementList ]						$$ = make(\"()\", $2)\n"
"\n"
"ElementList\n"
"	: LiteralElement						$$ = $1\n"
"	| ElementList , LiteralElement			$$ = make(\"element-list\", $3, $1)\n"
"\n"
"LiteralElement\n"
"	: AssignmentExpression					$$ = $1\n"
"\n"
"ObjectLiteral\n"
"	: { }				$$ = make(\"{}\", $0)\n"
"	| { FieldList }		$$ = make(\"{}\", $2)\n"
"\n"
"FieldList\n"
"	: LiteralField					$$ = $1\n"
"	| FieldList , LiteralField		$$ = make(\"field-list\", $3, $1)\n"
"\n"
"LiteralField\n"
"	: Identifier : AssignmentExpression		$$ = make(\"literal-field\", $3, $1)\n"
"\n"
"FunctionExpression\n"
"	: AnonymousFunction			$$ = $1\n"
"\n"
"PrimaryExpression\n"
"	: SimpleExpression		$$ = $1\n"
"	| FunctionExpression	$$ = $1\n"
"	| ObjectLiteral			$$ = $1\n"
"\n"
"SimpleExpression\n"
"	: true						$$ = make(\"true\")\n"
"	| false						$$ = make(\"false\")\n"
"	| Number					$$ = $1\n"
"	| String					$$ = $1\n"
"	| Identifier				$$ = $1\n"
"	| ParenthesizedExpression	$$ = $1\n"
"	| ArrayLiteral				$$ = $1\n"
"\n"
"ParenthesizedExpression\n"
"	: ( Expression )			$$ = $2\n"
"\n"
"Identifier\n"
"	: identifier	$$ = symbol($1)\n"
"\n"
"Number\n"
"	: number		$$ = constant($1)\n"
"\n"
"String\n"
"	: string		$$ = literal($1)\n";