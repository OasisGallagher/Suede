GLenum glGetError();
GLuint glCreateProgram();
void glEnable(GLenum cap);
void glDisable(GLenum cap);
void glClearStencil(GLint s);
void glCullFace(GLenum mode);
void glDepthFunc(GLenum func);
void glClear(GLbitfield mask);
void glEndQuery(GLenum target);
void glReadBuffer(GLenum mode);
void glStencilMask(GLuint mask);
void glDepthMask(GLboolean flag);
GLboolean glIsEnabled(GLenum cap);
void glUseProgram(GLuint program);
void glUnmapBuffer(GLenum target);
void glClearDepth(GLclampd depth);
void glDeleteShader(GLuint shader);
GLuint glCreateShader(GLenum type);
void glLinkProgram(GLuint program);
void glCompileShader(GLuint shader);
void glGenerateMipmap(GLenum target);
const GLubyte* glGetString(GLenum name);
void glDeleteProgram(GLuint program);
void glActiveTexture(GLenum texture);
void glBindVertexArray(GLuint array);
GLboolean glIsTexture(GLuint texture);
void glValidateProgram(GLuint program);
void glGenQueries(GLsizei n, GLuint* ids);
void glBeginQuery(GLenum target, GLuint id);
void glDeleteQueries(GLsizei n, GLuint* ids);
void glPolygonMode(GLenum face, GLenum mode);
void glEnableVertexAttribArray(GLuint index);
void glVertexAttribI1i(GLuint index, GLint x);
void glGenBuffers(GLsizei n, GLuint* buffers);
void glPixelStorei(GLenum pname, GLint param);
GLenum glCheckFramebufferStatus(GLenum target);
void* glMapBuffer(GLenum target, GLenum access);
void glBindBuffer(GLenum target, GLuint buffer);
void glGenTextures(GLsizei n, GLuint* textures);
void glGetIntegerv(GLenum pname, GLint* params);
void glGetFloatv(GLenum pname, GLfloat* params);
void glBlendFunc(GLenum sfactor, GLenum dfactor);
void glDepthRange(GLclampd zNear, GLclampd zFar);
void glBindTexture(GLenum target, GLuint texture);
void glDrawBuffers(GLsizei n, const GLenum* bufs);
void glGenVertexArrays(GLsizei n, GLuint* arrays);
void glAttachShader(GLuint program, GLuint shader);
void glPolygonOffset(GLfloat factor, GLfloat units);
void glStencilMaskSeparate(GLenum face, GLuint mask);
void glDeleteBuffers(GLsizei n, const GLuint* buffers);
void glVertexAttribI2i(GLuint index, GLint x, GLint y);
void glGenFramebuffers(GLsizei n, GLuint* framebuffers);
void glDeleteTextures(GLsizei n, const GLuint* textures);
void glStencilFunc(GLenum func, GLint ref, GLuint mask);
void glVertexAttribDivisor(GLuint index, GLuint divisor);
void glGenRenderbuffers(GLsizei n, GLuint* renderbuffers);
void glBindFramebuffer(GLenum target, GLuint framebuffer);
void glDeleteFramebuffers(GLsizei n, GLuint* framebuffers);
void glDeleteVertexArrays(GLsizei n, const GLuint* arrays);
void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
void glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass);
void glTexParameteri(GLenum target, GLenum pname, GLint param);
GLint glGetUniformLocation(GLuint program, const GLchar* name);
void glGetShaderiv(GLuint shader, GLenum pname, GLint* params);
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
void glGetProgramiv(GLuint program, GLenum pname, GLint* params);
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
void glDeleteRenderbuffers(GLsizei n, const GLuint* renderbuffers);
void glGetTexParameteriv(GLenum target, GLenum pname, GLint* params);
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
void glDebugMessageCallback(GLDEBUGPROC callback, const void* userParam);
void glBindAttribLocation(GLuint program, GLuint index, const GLchar* name);
GLuint glGetUniformBlockIndex(GLuint program, const GLchar* uniformBlockName);
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint* params);
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
void glBufferData(GLenum target, GLsizeiptr size, const void* data, GLenum usage);
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void* data);
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei* length, GLchar* infoLog);
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid* pixels);
void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint* value);
void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat* value);
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
void glShaderSource(GLuint shader, GLsizei count, const GLchar* const* string, const GLint* length);
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint* params);
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void* pointer);
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid* pixels);
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value);
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* pointer);
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei* length, GLint* size, GLenum* type, GLchar* name);
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei instancecount, GLint basevertex);
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid* pixels);